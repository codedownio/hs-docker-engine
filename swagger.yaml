---
swagger: "2.0"
info:
  description: "The Engine API is an HTTP API served by Docker Engine. It is the API\
    \ the Docker client uses to communicate with the Engine, so everything the Docker\
    \ client can do can be done with the API.\n\nMost of the client's commands map\
    \ directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The\
    \ notable exception is running containers, which consists of several API calls.\n\
    \n# Errors\n\nThe API uses standard HTTP status codes to indicate the success\
    \ or failure of the API call. The body of the response will be JSON in the following\
    \ format:\n\n```\n{\n  \"message\": \"page not found\"\n}\n```\n\n# Versioning\n\
    \nThe API is usually changed in each release of Docker, so API calls are versioned\
    \ to ensure that clients don't break.\n\nFor Docker Engine 1.13, the API version\
    \ is 1.25. To lock to this version, you prefix the URL with `/v1.25`. For example,\
    \ calling `/info` is the same as calling `/v1.25/info`.\n\nEngine releases in\
    \ the near future should support this version of the API, so your client will\
    \ continue to work even if it is talking to a newer Engine.\n\nIn previous versions\
    \ of Docker, it was possible to access the API without providing a version. This\
    \ behaviour is now deprecated will be removed in a future version of Docker.\n\
    \nThe API uses an open schema model, which means server may add extra properties\
    \ to responses. Likewise, the server will ignore any extra query parameters and\
    \ request body properties. When you write clients, you need to ignore additional\
    \ properties in responses to ensure they do not break when talking to newer Docker\
    \ daemons.\n\nThis documentation is for version 1.25 of the API, which was introduced\
    \ with Docker 1.13. Use this table to find documentation for previous versions\
    \ of the API:\n\nDocker version  | API version | Changes\n----------------|-------------|---------\n\
    1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes)\n\
    1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes)\n\
    1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes)\n\
    1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes)\n\
    1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes)\n\
    1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes)\n\
    1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)\n\
    \n# Authentication\n\nAuthentication for registries is handled client side. The\
    \ client has to send authentication details to various endpoints that need to\
    \ communicate with registries, such as `POST /images/(name)/push`. These are sent\
    \ as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following\
    \ structure:\n\n```\n{\n  \"username\": \"string\",\n  \"password\": \"string\"\
    ,\n  \"email\": \"string\",\n  \"serveraddress\": \"string\"\n}\n```\n\nThe `serveraddress`\
    \ is a domain/IP without a protocol. Throughout this structure, double quotes\
    \ are required.\n\nIf you have already got an identity token from the [`/auth`\
    \ endpoint](#operation/SystemAuth), you can just pass this instead of credentials:\n\
    \n```\n{\n  \"identitytoken\": \"9cbaf023786cd7...\"\n}\n```\n"
  version: "1.25"
  title: "Docker Engine API"
  x-logo:
    url: "https://docs.docker.com/images/logo-docker-main.png"
basePath: "/v1.25"
tags:
- name: "Container"
  description: "Create and manage containers.\n"
  x-displayName: "Containers"
- name: "Image"
  x-displayName: "Images"
- name: "Network"
  description: "Networks are user-defined networks that containers can be attached\
    \ to. See the [networking documentation](https://docs.docker.com/engine/userguide/networking/)\
    \ for more information.\n"
  x-displayName: "Networks"
- name: "Volume"
  description: "Create and manage persistent storage that can be attached to containers.\n"
  x-displayName: "Volumes"
- name: "Exec"
  description: "Run new commands inside running containers. See the [command-line\
    \ reference](https://docs.docker.com/engine/reference/commandline/exec/) for more\
    \ information.\n\nTo exec a command in a container, you first need to create an\
    \ exec instance, then start it. These two API endpoints are wrapped up in a single\
    \ command-line command, `docker exec`.\n"
  x-displayName: "Exec"
- name: "Secret"
  x-displayName: "Secrets"
- name: "Swarm"
  description: "Engines can be clustered together in a swarm. See [the swarm mode\
    \ documentation](https://docs.docker.com/engine/swarm/) for more information.\n"
  x-displayName: "Swarm"
- name: "Node"
  description: "Nodes are instances of the Engine participating in a swarm. Swarm\
    \ mode must be enabled for these endpoints to work.\n"
  x-displayName: "Nodes"
- name: "Service"
  description: "Services are the definitions of tasks to run on a swarm. Swarm mode\
    \ must be enabled for these endpoints to work.\n"
  x-displayName: "Services"
- name: "Task"
  description: "A task is a container running on a swarm. It is the atomic scheduling\
    \ unit of swarm. Swarm mode must be enabled for these endpoints to work.\n"
  x-displayName: "Tasks"
- name: "Plugin"
  x-displayName: "Plugins"
- name: "System"
  x-displayName: "System"
schemes:
- "http"
- "https"
consumes:
- "application/json"
- "text/plain"
produces:
- "application/json"
- "text/plain"
paths:
  /containers/json:
    get:
      tags:
      - "Container"
      summary: "List containers"
      operationId: "ContainerList"
      produces:
      - "application/json"
      parameters:
      - name: "all"
        in: "query"
        description: "Return all containers. By default, only running containers are\
          \ shown"
        required: false
        type: "boolean"
        default: false
      - name: "limit"
        in: "query"
        description: "Return this number of most recently created containers, including\
          \ non-running ones."
        required: false
        type: "integer"
      - name: "size"
        in: "query"
        description: "Return the size of container as fields `SizeRw` and `SizeRootFs`."
        required: false
        type: "boolean"
        default: false
      - name: "filters"
        in: "query"
        description: "Filters to process on the container list, encoded as JSON (a\
          \ `map[string][]string`). For example, `{\"status\": [\"paused\"]}` will\
          \ only return paused containers.\n\nAvailable filters:\n- `exited=<int>`\
          \ containers with exit code of `<int>`\n- `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)\n\
          - `label=key` or `label=\"key=value\"` of a container label\n- `isolation=`(`default`|`process`|`hyperv`)\
          \ (Windows daemon only)\n- `id=<ID>` a container's ID\n- `name=<name>` a\
          \ container's name\n- `is-task=`(`true`|`false`)\n- `ancestor`=(`<image-name>[:<tag>]`,\
          \ `<image id>`, or `<image@digest>`)\n- `before`=(`<container id>` or `<container\
          \ name>`)\n- `since`=(`<container id>` or `<container name>`)\n- `volume`=(`<volume\
          \ name>` or `<mount point destination>`)\n- `network`=(`<network id>` or\
          \ `<network name>`)\n- `health`=(`starting`|`healthy`|`unhealthy`|`none`)\n"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/ContainerSummary"
          examples:
            application/json:
            - Id: "8dfafdbc3a40"
              Names:
              - "/boring_feynman"
              Image: "ubuntu:latest"
              ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
              Command: "echo 1"
              Created: 1367854155
              State: "Exited"
              Status: "Exit 0"
              Ports:
              - PrivatePort: 2222
                PublicPort: 3333
                Type: "tcp"
              Labels:
                com.example.vendor: "Acme"
                com.example.license: "GPL"
                com.example.version: "1.0"
              SizeRw: 12288
              SizeRootFs: 0
              HostConfig:
                NetworkMode: "default"
              NetworkSettings:
                Networks:
                  bridge:
                    NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                    EndpointID: "2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f"
                    Gateway: "172.17.0.1"
                    IPAddress: "172.17.0.2"
                    IPPrefixLen: 16
                    IPv6Gateway: ""
                    GlobalIPv6Address: ""
                    GlobalIPv6PrefixLen: 0
                    MacAddress: "02:42:ac:11:00:02"
              Mounts:
              - Name: "fac362...80535"
                Source: "/data"
                Destination: "/data"
                Driver: "local"
                Mode: "ro,Z"
                RW: false
                Propagation: ""
            - Id: "9cd87474be90"
              Names:
              - "/coolName"
              Image: "ubuntu:latest"
              ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
              Command: "echo 222222"
              Created: 1367854155
              State: "Exited"
              Status: "Exit 0"
              Ports: []
              Labels: {}
              SizeRw: 12288
              SizeRootFs: 0
              HostConfig:
                NetworkMode: "default"
              NetworkSettings:
                Networks:
                  bridge:
                    NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                    EndpointID: "88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a"
                    Gateway: "172.17.0.1"
                    IPAddress: "172.17.0.8"
                    IPPrefixLen: 16
                    IPv6Gateway: ""
                    GlobalIPv6Address: ""
                    GlobalIPv6PrefixLen: 0
                    MacAddress: "02:42:ac:11:00:08"
              Mounts: []
            - Id: "3176a2479c92"
              Names:
              - "/sleepy_dog"
              Image: "ubuntu:latest"
              ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
              Command: "echo 3333333333333333"
              Created: 1367854154
              State: "Exited"
              Status: "Exit 0"
              Ports: []
              Labels: {}
              SizeRw: 12288
              SizeRootFs: 0
              HostConfig:
                NetworkMode: "default"
              NetworkSettings:
                Networks:
                  bridge:
                    NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                    EndpointID: "8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d"
                    Gateway: "172.17.0.1"
                    IPAddress: "172.17.0.6"
                    IPPrefixLen: 16
                    IPv6Gateway: ""
                    GlobalIPv6Address: ""
                    GlobalIPv6PrefixLen: 0
                    MacAddress: "02:42:ac:11:00:06"
              Mounts: []
            - Id: "4cb07b47f9fb"
              Names:
              - "/running_cat"
              Image: "ubuntu:latest"
              ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
              Command: "echo 444444444444444444444444444444444"
              Created: 1367854152
              State: "Exited"
              Status: "Exit 0"
              Ports: []
              Labels: {}
              SizeRw: 12288
              SizeRootFs: 0
              HostConfig:
                NetworkMode: "default"
              NetworkSettings:
                Networks:
                  bridge:
                    NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                    EndpointID: "d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9"
                    Gateway: "172.17.0.1"
                    IPAddress: "172.17.0.5"
                    IPPrefixLen: 16
                    IPv6Gateway: ""
                    GlobalIPv6Address: ""
                    GlobalIPv6PrefixLen: 0
                    MacAddress: "02:42:ac:11:00:05"
              Mounts: []
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/create:
    post:
      tags:
      - "Container"
      summary: "Create a container"
      operationId: "ContainerCreate"
      consumes:
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Assign the specified name to the container. Must match `/?[a-zA-Z0-9_-]+`."
        required: false
        type: "string"
        pattern: "/?[a-zA-Z0-9_-]+"
      - in: "body"
        name: "body"
        description: "Container to create"
        required: true
        schema:
          allOf:
          - $ref: "#/definitions/Config"
          - type: "object"
            properties:
              HostConfig:
                $ref: "#/definitions/HostConfig"
              NetworkingConfig:
                type: "object"
                description: "This container's networking configuration."
                properties:
                  EndpointsConfig:
                    type: "object"
                    description: "A mapping of network name to endpoint configuration\
                      \ for that network."
                    additionalProperties:
                      $ref: "#/definitions/EndpointSettings"
      responses:
        201:
          description: "Container created successfully"
          schema:
            $ref: "#/definitions/inline_response_201"
          examples:
            application/json:
              Id: "e90e34656806"
              Warnings: []
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        406:
          description: "impossible to attach"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "conflict"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/json:
    get:
      tags:
      - "Container"
      summary: "Inspect a container"
      description: "Return low-level information about a container."
      operationId: "ContainerInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "size"
        in: "query"
        description: "Return the size of container as fields `SizeRw` and `SizeRootFs`"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/inline_response_200"
          examples:
            application/json:
              AppArmorProfile: ""
              Args:
              - "-c"
              - "exit 9"
              Config:
                AttachStderr: true
                AttachStdin: false
                AttachStdout: true
                Cmd:
                - "/bin/sh"
                - "-c"
                - "exit 9"
                Domainname: ""
                Env:
                - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                Hostname: "ba033ac44011"
                Image: "ubuntu"
                Labels:
                  com.example.vendor: "Acme"
                  com.example.license: "GPL"
                  com.example.version: "1.0"
                MacAddress: ""
                NetworkDisabled: false
                OpenStdin: false
                StdinOnce: false
                Tty: false
                User: ""
                Volumes:
                  /volumes/data: {}
                WorkingDir: ""
                StopSignal: "SIGTERM"
                StopTimeout: 10
              Created: "2015-01-06T15:47:31.485331387Z"
              Driver: "devicemapper"
              HostConfig:
                MaximumIOps: 0
                MaximumIOBps: 0
                BlkioWeight: 0
                BlkioWeightDevice:
                - {}
                BlkioDeviceReadBps:
                - {}
                BlkioDeviceWriteBps:
                - {}
                BlkioDeviceReadIOps:
                - {}
                BlkioDeviceWriteIOps:
                - {}
                ContainerIDFile: ""
                CpusetCpus: ""
                CpusetMems: ""
                CpuPercent: 80
                CpuShares: 0
                CpuPeriod: 100000
                CpuRealtimePeriod: 1000000
                CpuRealtimeRuntime: 10000
                Devices: []
                IpcMode: ""
                LxcConf: []
                Memory: 0
                MemorySwap: 0
                MemoryReservation: 0
                KernelMemory: 0
                OomKillDisable: false
                OomScoreAdj: 500
                NetworkMode: "bridge"
                PidMode: ""
                PortBindings: {}
                Privileged: false
                ReadonlyRootfs: false
                PublishAllPorts: false
                RestartPolicy:
                  MaximumRetryCount: 2
                  Name: "on-failure"
                LogConfig:
                  Type: "json-file"
                Sysctls:
                  net.ipv4.ip_forward: "1"
                Ulimits:
                - {}
                VolumeDriver: ""
                ShmSize: 67108864
              HostnamePath: "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname"
              HostsPath: "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts"
              LogPath: "/var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log"
              Id: "ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39"
              Image: "04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2"
              MountLabel: ""
              Name: "/boring_euclid"
              NetworkSettings:
                Bridge: ""
                SandboxID: ""
                HairpinMode: false
                LinkLocalIPv6Address: ""
                LinkLocalIPv6PrefixLen: 0
                SandboxKey: ""
                SecondaryIPAddresses: null
                SecondaryIPv6Addresses: null
                EndpointID: ""
                Gateway: ""
                GlobalIPv6Address: ""
                GlobalIPv6PrefixLen: 0
                IPAddress: ""
                IPPrefixLen: 0
                IPv6Gateway: ""
                MacAddress: ""
                Networks:
                  bridge:
                    NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                    EndpointID: "7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d"
                    Gateway: "172.17.0.1"
                    IPAddress: "172.17.0.2"
                    IPPrefixLen: 16
                    IPv6Gateway: ""
                    GlobalIPv6Address: ""
                    GlobalIPv6PrefixLen: 0
                    MacAddress: "02:42:ac:12:00:02"
              Path: "/bin/sh"
              ProcessLabel: ""
              ResolvConfPath: "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf"
              RestartCount: 1
              State:
                Error: ""
                ExitCode: 9
                FinishedAt: "2015-01-06T15:47:32.080254511Z"
                OOMKilled: false
                Dead: false
                Paused: false
                Pid: 0
                Restarting: false
                Running: true
                StartedAt: "2015-01-06T15:47:32.072697474Z"
                Status: "running"
              Mounts:
              - Name: "fac362...80535"
                Source: "/data"
                Destination: "/data"
                Driver: "local"
                Mode: "ro,Z"
                RW: false
                Propagation: ""
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/top:
    get:
      tags:
      - "Container"
      summary: "List processes running inside a container"
      description: "On Unix systems, this is done by running the `ps` command. This\
        \ endpoint is not supported on Windows."
      operationId: "ContainerTop"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "ps_args"
        in: "query"
        description: "The arguments to pass to `ps`. For example, `aux`"
        required: false
        type: "string"
        default: "-ef"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/inline_response_200_1"
          examples:
            application/json:
              Titles:
              - "UID"
              - "PID"
              - "PPID"
              - "C"
              - "STIME"
              - "TTY"
              - "TIME"
              - "CMD"
              Processes:
              - - "root"
                - "13642"
                - "882"
                - "0"
                - "17:03"
                - "pts/0"
                - "00:00:00"
                - "/bin/bash"
              - - "root"
                - "13735"
                - "13642"
                - "0"
                - "17:06"
                - "pts/0"
                - "00:00:00"
                - "sleep 10"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/logs:
    get:
      tags:
      - "Container"
      summary: "Get container logs"
      description: "Get `stdout` and `stderr` logs from a container.\n\nNote: This\
        \ endpoint works only for containers with the `json-file` or `journald` logging\
        \ driver.\n"
      operationId: "ContainerLogs"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "follow"
        in: "query"
        description: "Return the logs as a stream.\n\nThis will return a `101` HTTP\
          \ response with a `Connection: upgrade` header, then hijack the HTTP connection\
          \ to send raw output. For more information about hijacking and the stream\
          \ format, [see the documentation for the attach endpoint](#operation/ContainerAttach).\n"
        required: false
        type: "boolean"
        default: false
      - name: "stdout"
        in: "query"
        description: "Return logs from `stdout`"
        required: false
        type: "boolean"
        default: false
      - name: "stderr"
        in: "query"
        description: "Return logs from `stderr`"
        required: false
        type: "boolean"
        default: false
      - name: "since"
        in: "query"
        description: "Only return logs since this time, as a UNIX timestamp"
        required: false
        type: "integer"
        default: 0
      - name: "timestamps"
        in: "query"
        description: "Add timestamps to every log line"
        required: false
        type: "boolean"
        default: false
      - name: "tail"
        in: "query"
        description: "Only return this number of log lines from the end of the logs.\
          \ Specify as an integer or `all` to output all log lines."
        required: false
        type: "string"
        default: "all"
      responses:
        101:
          description: "logs returned as a stream"
          schema:
            type: "string"
            format: "binary"
        200:
          description: "logs returned as a string in response body"
          schema:
            type: "string"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/changes:
    get:
      tags:
      - "Container"
      summary: "Get changes on a container’s filesystem"
      description: "Returns which files in a container's filesystem have been added,\
        \ deleted, or modified. The `Kind` of modification can be one of:\n\n- `0`:\
        \ Modified\n- `1`: Added\n- `2`: Deleted\n"
      operationId: "ContainerChanges"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200_2"
          examples:
            application/json:
            - Path: "/dev"
              Kind: 0
            - Path: "/dev/kmsg"
              Kind: 1
            - Path: "/test"
              Kind: 1
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/export:
    get:
      tags:
      - "Container"
      summary: "Export a container"
      description: "Export the contents of a container as a tarball."
      operationId: "ContainerExport"
      produces:
      - "application/octet-stream"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/stats:
    get:
      tags:
      - "Container"
      summary: "Get container stats based on resource usage"
      description: "This endpoint returns a live stream of a container’s resource\
        \ usage statistics.\n\nThe `precpu_stats` is the CPU statistic of last read,\
        \ which is used for calculating the CPU usage percentage. It is not the same\
        \ as the `cpu_stats` field.\n"
      operationId: "ContainerStats"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "stream"
        in: "query"
        description: "Stream the output. If false, the stats will be output once and\
          \ then it will disconnect."
        required: false
        type: "boolean"
        default: true
      responses:
        200:
          description: "no error"
          schema:
            type: "object"
            properties: {}
          examples:
            application/json:
              read: "2015-01-08T22:57:31.547920715Z"
              pids_stats:
                current: 3
              networks:
                eth0:
                  rx_bytes: 5338
                  rx_dropped: 0
                  rx_errors: 0
                  rx_packets: 36
                  tx_bytes: 648
                  tx_dropped: 0
                  tx_errors: 0
                  tx_packets: 8
                eth5:
                  rx_bytes: 4641
                  rx_dropped: 0
                  rx_errors: 0
                  rx_packets: 26
                  tx_bytes: 690
                  tx_dropped: 0
                  tx_errors: 0
                  tx_packets: 9
              memory_stats:
                stats:
                  total_pgmajfault: 0
                  cache: 0
                  mapped_file: 0
                  total_inactive_file: 0
                  pgpgout: 414
                  rss: 6537216
                  total_mapped_file: 0
                  writeback: 0
                  unevictable: 0
                  pgpgin: 477
                  total_unevictable: 0
                  pgmajfault: 0
                  total_rss: 6537216
                  total_rss_huge: 6291456
                  total_writeback: 0
                  total_inactive_anon: 0
                  rss_huge: 6291456
                  hierarchical_memory_limit: 67108864
                  total_pgfault: 964
                  total_active_file: 0
                  active_anon: 6537216
                  total_active_anon: 6537216
                  total_pgpgout: 414
                  total_cache: 0
                  inactive_anon: 0
                  active_file: 0
                  pgfault: 964
                  inactive_file: 0
                  total_pgpgin: 477
                max_usage: 6651904
                usage: 6537216
                failcnt: 0
                limit: 67108864
              blkio_stats: {}
              cpu_stats:
                cpu_usage:
                  percpu_usage:
                  - 8646879
                  - 24472255
                  - 36438778
                  - 30657443
                  usage_in_usermode: 50000000
                  total_usage: 100215355
                  usage_in_kernelmode: 30000000
                system_cpu_usage: 739306590000000
                throttling_data:
                  periods: 0
                  throttled_periods: 0
                  throttled_time: 0
              precpu_stats:
                cpu_usage:
                  percpu_usage:
                  - 8646879
                  - 24350896
                  - 36438778
                  - 30657443
                  usage_in_usermode: 50000000
                  total_usage: 100093996
                  usage_in_kernelmode: 30000000
                system_cpu_usage: 9492140000000
                throttling_data:
                  periods: 0
                  throttled_periods: 0
                  throttled_time: 0
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/resize:
    post:
      tags:
      - "Container"
      summary: "Resize a container TTY"
      description: "Resize the TTY for a container. You must restart the container\
        \ for the resize to take effect."
      operationId: "ContainerResize"
      consumes:
      - "application/octet-stream"
      produces:
      - "text/plain"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "h"
        in: "query"
        description: "Height of the tty session in characters"
        required: false
        type: "integer"
      - name: "w"
        in: "query"
        description: "Width of the tty session in characters"
        required: false
        type: "integer"
      responses:
        200:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "cannot resize container"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/start:
    post:
      tags:
      - "Container"
      summary: "Start a container"
      operationId: "ContainerStart"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "detachKeys"
        in: "query"
        description: "Override the key sequence for detaching a container. Format\
          \ is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one\
          \ of: `a-z`, `@`, `^`, `[`, `,` or `_`."
        required: false
        type: "string"
      responses:
        204:
          description: "no error"
        304:
          description: "container already started"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/stop:
    post:
      tags:
      - "Container"
      summary: "Stop a container"
      operationId: "ContainerStop"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "t"
        in: "query"
        description: "Number of seconds to wait before killing the container"
        required: false
        type: "integer"
      responses:
        204:
          description: "no error"
        304:
          description: "container already stopped"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/restart:
    post:
      tags:
      - "Container"
      summary: "Restart a container"
      operationId: "ContainerRestart"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "t"
        in: "query"
        description: "Number of seconds to wait before killing the container"
        required: false
        type: "integer"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/kill:
    post:
      tags:
      - "Container"
      summary: "Kill a container"
      description: "Send a POSIX signal to a container, defaulting to killing to the\
        \ container."
      operationId: "ContainerKill"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "signal"
        in: "query"
        description: "Signal to send to the container as an integer or string (e.g.\
          \ `SIGINT`)"
        required: false
        type: "string"
        default: "SIGKILL"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/update:
    post:
      tags:
      - "Container"
      summary: "Update a container"
      description: "Change various configuration options of a container without having\
        \ to recreate it."
      operationId: "ContainerUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - in: "body"
        name: "update"
        required: true
        schema:
          allOf:
          - $ref: "#/definitions/Resources"
          - type: "object"
            properties:
              RestartPolicy:
                $ref: "#/definitions/RestartPolicy"
      responses:
        200:
          description: "The container has been updated."
          schema:
            $ref: "#/definitions/inline_response_200_3"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/rename:
    post:
      tags:
      - "Container"
      summary: "Rename a container"
      operationId: "ContainerRename"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "New name for the container"
        required: true
        type: "string"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        409:
          description: "name already in use"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/pause:
    post:
      tags:
      - "Container"
      summary: "Pause a container"
      description: "Use the cgroups freezer to suspend all processes in a container.\n\
        \nTraditionally, when suspending a process the `SIGSTOP` signal is used, which\
        \ is observable by the process being suspended. With the cgroups freezer the\
        \ process is unaware, and unable to capture, that it is being suspended, and\
        \ subsequently resumed.\n"
      operationId: "ContainerPause"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/unpause:
    post:
      tags:
      - "Container"
      summary: "Unpause a container"
      description: "Resume a container which has been paused."
      operationId: "ContainerUnpause"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      responses:
        204:
          description: "no error"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/attach:
    post:
      tags:
      - "Container"
      summary: "Attach to a container"
      description: "Attach to a container to read its output or send it input. You\
        \ can attach to the same container multiple times and you can reattach to\
        \ containers that have been detached.\n\nEither the `stream` or `logs` parameter\
        \ must be `true` for this endpoint to do anything.\n\nSee [the documentation\
        \ for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/)\
        \ for more details.\n\n### Hijacking\n\nThis endpoint hijacks the HTTP connection\
        \ to transport `stdin`, `stdout`, and `stderr` on the same socket.\n\nThis\
        \ is the response from the daemon for an attach request:\n\n```\nHTTP/1.1\
        \ 200 OK\nContent-Type: application/vnd.docker.raw-stream\n\n[STREAM]\n```\n\
        \nAfter the headers and two new lines, the TCP connection can now be used\
        \ for raw, bidirectional communication between the client and server.\n\n\
        To hint potential proxies about connection hijacking, the Docker client can\
        \ also optionally send connection upgrade headers.\n\nFor example, the client\
        \ sends this request to upgrade the connection:\n\n```\nPOST /containers/16253994b7c4/attach?stream=1&stdout=1\
        \ HTTP/1.1\nUpgrade: tcp\nConnection: Upgrade\n```\n\nThe Docker daemon will\
        \ respond with a `101 UPGRADED` response, and will similarly follow with the\
        \ raw stream:\n\n```\nHTTP/1.1 101 UPGRADED\nContent-Type: application/vnd.docker.raw-stream\n\
        Connection: Upgrade\nUpgrade: tcp\n\n[STREAM]\n```\n\n### Stream format\n\n\
        When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),\
        \ the stream over the hijacked connected is multiplexed to separate out `stdout`\
        \ and `stderr`. The stream consists of a series of frames, each containing\
        \ a header and a payload.\n\nThe header contains the information which the\
        \ stream writes (`stdout` or `stderr`). It also contains the size of the associated\
        \ frame encoded in the last four bytes (`uint32`).\n\nIt is encoded on the\
        \ first eight bytes like this:\n\n```go\nheader := [8]byte{STREAM_TYPE, 0,\
        \ 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}\n```\n\n`STREAM_TYPE` can be:\n\n- 0:\
        \ `stdin` (is written on `stdout`)\n- 1: `stdout`\n- 2: `stderr`\n\n`SIZE1,\
        \ SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as\
        \ big endian.\n\nFollowing the header is the payload, which is the specified\
        \ number of bytes of `STREAM_TYPE`.\n\nThe simplest way to implement this\
        \ protocol is the following:\n\n1. Read 8 bytes.\n2. Choose `stdout` or `stderr`\
        \ depending on the first byte.\n3. Extract the frame size from the last four\
        \ bytes.\n4. Read the extracted size and output it on the correct output.\n\
        5. Goto 1.\n\n### Stream format when using a TTY\n\nWhen the TTY setting is\
        \ enabled in [`POST /containers/create`](#operation/ContainerCreate), the\
        \ stream is not multiplexed. The data exchanged over the hijacked connection\
        \ is simply the raw data from the process PTY and client's `stdin`.\n"
      operationId: "ContainerAttach"
      produces:
      - "application/vnd.docker.raw-stream"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "detachKeys"
        in: "query"
        description: "Override the key sequence for detaching a container.Format is\
          \ a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of:\
          \ `a-z`, `@`, `^`, `[`, `,` or `_`."
        required: false
        type: "string"
      - name: "logs"
        in: "query"
        description: "Replay previous logs from the container.\n\nThis is useful for\
          \ attaching to a container that has started and you want to output everything\
          \ since the container started.\n\nIf `stream` is also enabled, once all\
          \ the previous output has been returned, it will seamlessly transition into\
          \ streaming current output.\n"
        required: false
        type: "boolean"
        default: false
      - name: "stream"
        in: "query"
        description: "Stream attached streams from the the time the request was made\
          \ onwards"
        required: false
        type: "boolean"
        default: false
      - name: "stdin"
        in: "query"
        description: "Attach to `stdin`"
        required: false
        type: "boolean"
        default: false
      - name: "stdout"
        in: "query"
        description: "Attach to `stdout`"
        required: false
        type: "boolean"
        default: false
      - name: "stderr"
        in: "query"
        description: "Attach to `stderr`"
        required: false
        type: "boolean"
        default: false
      responses:
        101:
          description: "no error, hints proxy about hijacking"
        200:
          description: "no error, no upgrade header found"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/attach/ws:
    get:
      tags:
      - "Container"
      summary: "Attach to a container via a websocket"
      operationId: "ContainerAttachWebsocket"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "detachKeys"
        in: "query"
        description: "Override the key sequence for detaching a container.Format is\
          \ a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of:\
          \ `a-z`, `@`, `^`, `[`, `,`, or `_`."
        required: false
        type: "string"
      - name: "logs"
        in: "query"
        description: "Return logs"
        required: false
        type: "boolean"
        default: false
      - name: "stream"
        in: "query"
        description: "Return stream"
        required: false
        type: "boolean"
        default: false
      - name: "stdin"
        in: "query"
        description: "Attach to `stdin`"
        required: false
        type: "boolean"
        default: false
      - name: "stdout"
        in: "query"
        description: "Attach to `stdout`"
        required: false
        type: "boolean"
        default: false
      - name: "stderr"
        in: "query"
        description: "Attach to `stderr`"
        required: false
        type: "boolean"
        default: false
      responses:
        101:
          description: "no error, hints proxy about hijacking"
        200:
          description: "no error, no upgrade header found"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/wait:
    post:
      tags:
      - "Container"
      summary: "Wait for a container"
      description: "Block until a container stops, then returns the exit code."
      operationId: "ContainerWait"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      responses:
        200:
          description: "The container has exit."
          schema:
            $ref: "#/definitions/inline_response_200_4"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}:
    delete:
      tags:
      - "Container"
      summary: "Remove a container"
      operationId: "ContainerDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "v"
        in: "query"
        description: "Remove the volumes associated with the container."
        required: false
        type: "boolean"
        default: false
      - name: "force"
        in: "query"
        description: "If the container is running, kill it before removing it."
        required: false
        type: "boolean"
        default: false
      responses:
        204:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/archive:
    get:
      tags:
      - "Container"
      summary: "Get an archive of a filesystem resource in a container"
      description: "Get an tar archive of a resource in the filesystem of container\
        \ id."
      operationId: "ContainerGetArchive"
      produces:
      - "application/x-tar"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "path"
        in: "query"
        description: "Resource in the container’s filesystem to archive."
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
        400:
          description: "Bad parameter"
        404:
          description: "Container or path does not exist"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    head:
      tags:
      - "Container"
      summary: "Get information about files in a container"
      description: "A response header `X-Docker-Container-Path-Stat` is return containing\
        \ a base64 - encoded JSON object with some filesystem header information about\
        \ the path."
      operationId: "ContainerArchiveHead"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "path"
        in: "query"
        description: "Resource in the container’s filesystem to archive."
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          headers:
            X-Docker-Container-Path-Stat:
              type: "string"
              description: "TODO"
        400:
          description: "Bad parameter"
        404:
          description: "Container or path does not exist"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - "Container"
      summary: "Extract an archive of files or folders to a directory in a container"
      description: "Upload a tar archive to be extracted to a path in the filesystem\
        \ of container id."
      operationId: "ContainerPutArchive"
      consumes:
      - "application/x-tar"
      - "application/octet-stream"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "path"
        in: "query"
        description: "Path to a directory in the container to extract the archive’\
          s contents into. "
        required: true
        type: "string"
      - name: "noOverwriteDirNonDir"
        in: "query"
        description: "If “1”, “true”, or “True” then it will be an error if unpacking\
          \ the given content would cause an existing directory to be replaced with\
          \ a non-directory and vice versa."
        required: false
        type: "string"
      - in: "body"
        name: "inputStream"
        description: "The input stream must be a tar archive compressed with one of\
          \ the following algorithms: identity (no compression), gzip, bzip2, xz."
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "The content was extracted successfully"
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Permission denied, the volume or container rootfs is marked\
            \ as read-only."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "No such container or path does not exist inside the container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/prune:
    post:
      tags:
      - "Container"
      summary: "Delete stopped containers"
      operationId: "ContainerPrune"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\
          \nAvailable filters:\n"
        required: false
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/inline_response_200_5"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/json:
    get:
      tags:
      - "Image"
      summary: "List Images"
      description: "Returns a list of images on the server. Note that it uses a different,\
        \ smaller representation of an image than inspecting a single image."
      operationId: "ImageList"
      produces:
      - "application/json"
      parameters:
      - name: "all"
        in: "query"
        description: "Show all images. Only images from a final layer (no children)\
          \ are shown by default."
        required: false
        type: "boolean"
        default: false
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the images list.\n\nAvailable filters:\n- `dangling=true`\n\
          - `label=key` or `label=\"key=value\"` of an image label\n- `before`=(`<image-name>[:<tag>]`,\
          \  `<image id>` or `<image@digest>`)\n- `since`=(`<image-name>[:<tag>]`,\
          \  `<image id>` or `<image@digest>`)\n- `reference`=(`<image-name>[:<tag>]`)\n"
        required: false
        type: "string"
      - name: "digests"
        in: "query"
        description: "Show digest information as a `RepoDigests` field on each image."
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "Summary image data for the images matching the query"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageSummary"
          examples:
            application/json:
            - Id: "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8"
              ParentId: ""
              RepoTags:
              - "ubuntu:12.04"
              - "ubuntu:precise"
              RepoDigests:
              - "ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787"
              Created: 1474925151
              Size: 103579269
              VirtualSize: 103579269
              SharedSize: 0
              Labels: {}
              Containers: 2
            - Id: "sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175"
              ParentId: ""
              RepoTags:
              - "ubuntu:12.10"
              - "ubuntu:quantal"
              RepoDigests:
              - "ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7"
              - "ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3"
              Created: 1403128455
              Size: 172064416
              VirtualSize: 172064416
              SharedSize: 0
              Labels: {}
              Containers: 5
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /build:
    post:
      tags:
      - "Image"
      summary: "Build an image"
      description: "Build an image from a tar archive with a `Dockerfile` in it.\n\
        \nThe `Dockerfile` specifies how the image is built from the tar archive.\
        \ It is typically in the archive's root, but can be at a different path or\
        \ have a different name by specifying the `dockerfile` parameter. [See the\
        \ `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).\n\
        \nThe Docker daemon performs a preliminary validation of the `Dockerfile`\
        \ before starting the build, and returns an error if the syntax is incorrect.\
        \ After that, each instruction is run one-by-one until the ID of the new image\
        \ is output.\n\nThe build is canceled if the client drops the connection by\
        \ quitting or being killed.\n"
      operationId: "ImageBuild"
      consumes:
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "inputStream"
        description: "A tar archive compressed with one of the following algorithms:\
          \ identity (no compression), gzip, bzip2, xz."
        required: false
        schema:
          type: "string"
          format: "binary"
      - name: "dockerfile"
        in: "query"
        description: "Path within the build context to the `Dockerfile`. This is ignored\
          \ if `remote` is specified and points to an external `Dockerfile`."
        required: false
        type: "string"
        default: "Dockerfile"
      - name: "t"
        in: "query"
        description: "A name and optional tag to apply to the image in the `name:tag`\
          \ format. If you omit the tag the default `latest` value is assumed. You\
          \ can provide several `t` parameters."
        required: false
        type: "string"
      - name: "remote"
        in: "query"
        description: "A Git repository URI or HTTP/HTTPS context URI. If the URI points\
          \ to a single text file, the file’s contents are placed into a file called\
          \ `Dockerfile` and the image is built from that file. If the URI points\
          \ to a tarball, the file is downloaded by the daemon and the contents therein\
          \ used as the context for the build. If the URI points to a tarball and\
          \ the `dockerfile` parameter is also specified, there must be a file with\
          \ the corresponding path inside the tarball."
        required: false
        type: "string"
      - name: "q"
        in: "query"
        description: "Suppress verbose build output."
        required: false
        type: "boolean"
        default: false
      - name: "nocache"
        in: "query"
        description: "Do not use the cache when building the image."
        required: false
        type: "boolean"
        default: false
      - name: "cachefrom"
        in: "query"
        description: "JSON array of images used for build cache resolution."
        required: false
        type: "string"
      - name: "pull"
        in: "query"
        description: "Attempt to pull the image even if an older image exists locally."
        required: false
        type: "string"
      - name: "rm"
        in: "query"
        description: "Remove intermediate containers after a successful build."
        required: false
        type: "boolean"
        default: true
      - name: "forcerm"
        in: "query"
        description: "Always remove intermediate containers, even upon failure."
        required: false
        type: "boolean"
        default: false
      - name: "memory"
        in: "query"
        description: "Set memory limit for build."
        required: false
        type: "integer"
      - name: "memswap"
        in: "query"
        description: "Total memory (memory + swap). Set as `-1` to disable swap."
        required: false
        type: "integer"
      - name: "cpushares"
        in: "query"
        description: "CPU shares (relative weight)."
        required: false
        type: "integer"
      - name: "cpusetcpus"
        in: "query"
        description: "CPUs in which to allow execution (e.g., `0-3`, `0,1`)."
        required: false
        type: "string"
      - name: "cpuperiod"
        in: "query"
        description: "The length of a CPU period in microseconds."
        required: false
        type: "integer"
      - name: "cpuquota"
        in: "query"
        description: "Microseconds of CPU time that the container can get in a CPU\
          \ period."
        required: false
        type: "integer"
      - name: "buildargs"
        in: "query"
        description: "JSON map of string pairs for build-time variables. Users pass\
          \ these values at build-time. Docker uses the buildargs as the environment\
          \ context for commands run via the `Dockerfile` RUN instruction, or for\
          \ variable expansion in other `Dockerfile` instructions. This is not meant\
          \ for passing secret values. [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg)"
        required: false
        type: "integer"
      - name: "shmsize"
        in: "query"
        description: "Size of `/dev/shm` in bytes. The size must be greater than 0.\
          \ If omitted the system uses 64MB."
        required: false
        type: "integer"
      - name: "squash"
        in: "query"
        description: "Squash the resulting images layers into a single layer. *(Experimental\
          \ release only.)*"
        required: false
        type: "boolean"
      - name: "labels"
        in: "query"
        description: "Arbitrary key/value labels to set on the image, as a JSON map\
          \ of string pairs."
        required: false
        type: "string"
      - name: "networkmode"
        in: "query"
        description: "Sets the networking mode for the run commands during build.\
          \ Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.\
          \ Any other value is taken as a custom network's name to which this container\
          \ should connect to."
        required: false
        type: "string"
      - name: "Content-type"
        in: "header"
        required: false
        type: "string"
        default: "application/tar"
        enum:
        - "application/tar"
      - name: "X-Registry-Config"
        in: "header"
        description: "This is a base64-encoded JSON object with auth configurations\
          \ for multiple registries that a build may refer to.\n\nThe key is a registry\
          \ URL, and the value is an auth configuration object, [as described in the\
          \ authentication section](#section/Authentication). For example:\n\n```\n\
          {\n  \"docker.example.com\": {\n    \"username\": \"janedoe\",\n    \"password\"\
          : \"hunter2\"\n  },\n  \"https://index.docker.io/v1/\": {\n    \"username\"\
          : \"mobydock\",\n    \"password\": \"conta1n3rize14\"\n  }\n}\n```\n\nOnly\
          \ the registry domain name (and port if not the default 443) are required.\
          \ However, for legacy reasons, the Docker Hub registry must be specified\
          \ with both a `https://` prefix and a `/v1/` suffix even though Docker will\
          \ prefer to use the v2 registry API.\n"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/create:
    post:
      tags:
      - "Image"
      summary: "Create an image"
      description: "Create an image by either pulling it from a registry or importing\
        \ it."
      operationId: "ImageCreate"
      consumes:
      - "text/plain"
      - "application/octet-stream"
      produces:
      - "application/json"
      parameters:
      - name: "fromImage"
        in: "query"
        description: "Name of the image to pull. The name may include a tag or digest.\
          \ This parameter may only be used when pulling an image. The pull is cancelled\
          \ if the HTTP connection is closed."
        required: false
        type: "string"
      - name: "fromSrc"
        in: "query"
        description: "Source to import. The value may be a URL from which the image\
          \ can be retrieved or `-` to read the image from the request body. This\
          \ parameter may only be used when importing an image."
        required: false
        type: "string"
      - name: "repo"
        in: "query"
        description: "Repository name given to an image when it is imported. The repo\
          \ may include a tag. This parameter may only be used when importing an image."
        required: false
        type: "string"
      - name: "tag"
        in: "query"
        description: "Tag or digest. If empty when pulling an image, this causes all\
          \ tags for the given image to be pulled."
        required: false
        type: "string"
      - in: "body"
        name: "inputImage"
        description: "Image content if the value `-` has been specified in fromSrc\
          \ query parameter"
        required: false
        schema:
          type: "string"
      - name: "X-Registry-Auth"
        in: "header"
        description: "A base64-encoded auth configuration. [See the authentication\
          \ section for details.](#section/Authentication)"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
        404:
          description: "repository does not exist or no read access"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/{name}/json:
    get:
      tags:
      - "Image"
      summary: "Inspect an image"
      description: "Return low-level information about an image."
      operationId: "ImageInspect"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Image name or id"
        required: true
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/Image"
          examples:
            application/json:
              Id: "sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c"
              Container: "cb91e48a60d01f1e27028b4fc6819f4f290b3cf12496c8176ec714d0d390984a"
              Comment: ""
              Os: "linux"
              Architecture: "amd64"
              Parent: "sha256:91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c"
              ContainerConfig:
                Tty: false
                Hostname: "e611e15f9c9d"
                Domainname: ""
                AttachStdout: false
                PublishService: ""
                AttachStdin: false
                OpenStdin: false
                StdinOnce: false
                NetworkDisabled: false
                OnBuild: []
                Image: "91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c"
                User: ""
                WorkingDir: ""
                MacAddress: ""
                AttachStderr: false
                Labels:
                  com.example.license: "GPL"
                  com.example.version: "1.0"
                  com.example.vendor: "Acme"
                Env:
                - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                Cmd:
                - "/bin/sh"
                - "-c"
                - "#(nop) LABEL com.example.vendor=Acme com.example.license=GPL com.example.version=1.0"
              DockerVersion: "1.9.0-dev"
              VirtualSize: 188359297
              Size: 0
              Author: ""
              Created: "2015-09-10T08:30:53.26995814Z"
              GraphDriver:
                Name: "aufs"
              RepoDigests:
              - "localhost:5000/test/busybox/example@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf"
              RepoTags:
              - "example:1.0"
              - "example:latest"
              - "example:stable"
              Config:
                Image: "91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c"
                NetworkDisabled: false
                OnBuild: []
                StdinOnce: false
                PublishService: ""
                AttachStdin: false
                OpenStdin: false
                Domainname: ""
                AttachStdout: false
                Tty: false
                Hostname: "e611e15f9c9d"
                Cmd:
                - "/bin/bash"
                Env:
                - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                Labels:
                  com.example.vendor: "Acme"
                  com.example.version: "1.0"
                  com.example.license: "GPL"
                MacAddress: ""
                AttachStderr: false
                WorkingDir: ""
                User: ""
              RootFS:
                Type: "layers"
                Layers:
                - "sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6"
                - "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"
        404:
          description: "No such image"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such image: someimage (tag: latest)"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/{name}/history:
    get:
      tags:
      - "Image"
      summary: "Get the history of an image"
      description: "Return parent layers of an image."
      operationId: "ImageHistory"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Image name or ID"
        required: true
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200_6"
          examples:
            application/json:
            - Id: "3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710"
              Created: 1398108230
              CreatedBy: "/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148\
                \ in /"
              Tags:
              - "ubuntu:lucid"
              - "ubuntu:10.04"
              Size: 182964289
              Comment: ""
            - Id: "6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8"
              Created: 1398108222
              CreatedBy: "/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com>\
                \ - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal\
                \ -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/"
              Tags: []
              Size: 0
              Comment: ""
            - Id: "511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"
              Created: 1371157430
              CreatedBy: ""
              Tags:
              - "scratch12:latest"
              - "scratch:latest"
              Size: 0
              Comment: "Imported from -"
        404:
          description: "No such image"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/{name}/push:
    post:
      tags:
      - "Image"
      summary: "Push an image"
      description: "Push an image to a registry.\n\nIf you wish to push an image on\
        \ to a private registry, that image must already have a tag which references\
        \ the registry. For example, `registry.example.com/myimage:latest`.\n\nThe\
        \ push is cancelled if the HTTP connection is closed.\n"
      operationId: "ImagePush"
      consumes:
      - "application/octet-stream"
      parameters:
      - name: "name"
        in: "path"
        description: "Image name or ID."
        required: true
        type: "string"
      - name: "tag"
        in: "query"
        description: "The tag to associate with the image on the registry."
        required: false
        type: "string"
      - name: "X-Registry-Auth"
        in: "header"
        description: "A base64-encoded auth configuration. [See the authentication\
          \ section for details.](#section/Authentication)"
        required: true
        type: "string"
      responses:
        200:
          description: "No error"
        404:
          description: "No such image"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/{name}/tag:
    post:
      tags:
      - "Image"
      summary: "Tag an image"
      description: "Tag an image so that it becomes part of a repository."
      operationId: "ImageTag"
      parameters:
      - name: "name"
        in: "path"
        description: "Image name or ID to tag."
        required: true
        type: "string"
      - name: "repo"
        in: "query"
        description: "The repository to tag in. For example, `someuser/someimage`."
        required: false
        type: "string"
      - name: "tag"
        in: "query"
        description: "The name of the new tag."
        required: false
        type: "string"
      responses:
        201:
          description: "No error"
        400:
          description: "Bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "No such image"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/{name}:
    delete:
      tags:
      - "Image"
      summary: "Remove an image"
      description: "Remove an image, along with any untagged parent images that were\
        \ referenced by that image.\n\nImages can't be removed if they have descendant\
        \ images, are being used by a running container or are being used by a build.\n"
      operationId: "ImageDelete"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Image name or ID"
        required: true
        type: "string"
      - name: "force"
        in: "query"
        description: "Remove the image even if it is being used by stopped containers\
          \ or has other tags"
        required: false
        type: "boolean"
        default: false
      - name: "noprune"
        in: "query"
        description: "Do not delete untagged parent images"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "No error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ImageDeleteResponse"
          examples:
            application/json:
            - Untagged: "3e2f21a89f"
            - Deleted: "3e2f21a89f"
            - Deleted: "53b4f83ac9"
        404:
          description: "No such image"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/search:
    get:
      tags:
      - "Image"
      summary: "Search images"
      description: "Search for an image on Docker Hub."
      operationId: "ImageSearch"
      produces:
      - "application/json"
      parameters:
      - name: "term"
        in: "query"
        description: "Term to search"
        required: true
        type: "string"
      - name: "limit"
        in: "query"
        description: "Maximum number of results to return"
        required: false
        type: "integer"
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the images list. Available filters:\n\n- `stars=<number>`\n\
          - `is-automated=(true|false)`\n- `is-official=(true|false)`\n"
        required: false
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200_7"
          examples:
            application/json:
            - description: ""
              is_official: false
              is_automated: false
              name: "wma55/u1210sshd"
              star_count: 0
            - description: ""
              is_official: false
              is_automated: false
              name: "jdswinbank/sshd"
              star_count: 0
            - description: ""
              is_official: false
              is_automated: false
              name: "vgauthier/sshd"
              star_count: 0
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/prune:
    post:
      tags:
      - "Image"
      summary: "Delete unused images"
      operationId: "ImagePrune"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\
          \nAvailable filters:\n- `dangling=<boolean>` When set to `true` (or `1`),\
          \ prune only\n   unused *and* untagged images. When set to `false`\n   (or\
          \ `0`), all unused images are pruned.\n"
        required: false
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/inline_response_200_8"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth:
    post:
      tags:
      - "System"
      summary: "Check auth configuration"
      description: "Validate credentials for a registry and, if available, get an\
        \ identity token for accessing the registry without password."
      operationId: "SystemAuth"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "authConfig"
        description: "Authentication to check"
        required: false
        schema:
          $ref: "#/definitions/AuthConfig"
      responses:
        200:
          description: "An identity token was generated successfully."
          schema:
            $ref: "#/definitions/inline_response_200_9"
          examples:
            application/json:
              Status: "Login Succeeded"
              IdentityToken: "9cbaf023786cd7..."
        204:
          description: "No error"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /info:
    get:
      tags:
      - "System"
      summary: "Get system information"
      operationId: "SystemInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/inline_response_200_10"
          examples:
            application/json:
              Architecture: "x86_64"
              ClusterStore: "etcd://localhost:2379"
              CgroupDriver: "cgroupfs"
              Containers: 11
              ContainersRunning: 7
              ContainersStopped: 3
              ContainersPaused: 1
              CpuCfsPeriod: true
              CpuCfsQuota: true
              Debug: false
              DockerRootDir: "/var/lib/docker"
              Driver: "btrfs"
              DriverStatus:
              - - ""
              ExperimentalBuild: false
              HttpProxy: "http://test:test@localhost:8080"
              HttpsProxy: "https://test:test@localhost:8080"
              ID: "7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS"
              IPv4Forwarding: true
              Images: 16
              IndexServerAddress: "https://index.docker.io/v1/"
              InitPath: "/usr/bin/docker"
              InitSha1: ""
              KernelMemory: true
              KernelVersion: "3.12.0-1-amd64"
              Labels:
              - "storage=ssd"
              MemTotal: 2099236864
              MemoryLimit: true
              NCPU: 1
              NEventsListener: 0
              NFd: 11
              NGoroutines: 21
              Name: "prod-server-42"
              NoProxy: "9.81.1.160"
              OomKillDisable: true
              OSType: "linux"
              OperatingSystem: "Boot2Docker"
              Plugins:
                Volume:
                - "local"
                Network:
                - "null"
                - "host"
                - "bridge"
              RegistryConfig:
                IndexConfigs:
                  docker.io:
                    Name: "docker.io"
                    Official: true
                    Secure: true
                InsecureRegistryCIDRs:
                - "127.0.0.0/8"
              SecurityOptions:
              - Key: "Name"
                Value: "seccomp"
              - Key: "Profile"
                Value: "default"
              - Key: "Name"
                Value: "apparmor"
              - Key: "Name"
                Value: "selinux"
              - Key: "Name"
                Value: "userns"
              ServerVersion: "1.9.0"
              SwapLimit: false
              SystemStatus:
              - - "State"
                - "Healthy"
              SystemTime: "2015-03-10T11:11:23.730591467-07:00"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /version:
    get:
      tags:
      - "System"
      summary: "Get version"
      description: "Returns the version of Docker that is running and various information\
        \ about the system that Docker is running on."
      operationId: "SystemVersion"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/inline_response_200_11"
          examples:
            application/json:
              Version: "1.13.0"
              Os: "linux"
              KernelVersion: "3.19.0-23-generic"
              GoVersion: "go1.6.3"
              GitCommit: "deadbee"
              Arch: "amd64"
              ApiVersion: "1.25"
              MinAPIVersion: "1.12"
              BuildTime: "2016-06-14T07:09:13.444803460+00:00"
              Experimental: true
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /_ping:
    get:
      tags:
      - "System"
      summary: "Ping"
      description: "This is a dummy endpoint you can use to test if the server is\
        \ accessible."
      operationId: "SystemPing"
      produces:
      - "text/plain"
      parameters: []
      responses:
        200:
          description: "no error"
          schema:
            type: "string"
            example: "OK"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /commit:
    post:
      tags:
      - "Image"
      summary: "Create a new image from a container"
      operationId: "ImageCommit"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "containerConfig"
        description: "The container configuration"
        required: false
        schema:
          $ref: "#/definitions/Config"
      - name: "container"
        in: "query"
        description: "The ID or name of the container to commit"
        required: false
        type: "string"
      - name: "repo"
        in: "query"
        description: "Repository name for the created image"
        required: false
        type: "string"
      - name: "tag"
        in: "query"
        description: "Tag name for the create image"
        required: false
        type: "string"
      - name: "comment"
        in: "query"
        description: "Commit message"
        required: false
        type: "string"
      - name: "author"
        in: "query"
        description: "Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)"
        required: false
        type: "string"
      - name: "pause"
        in: "query"
        description: "Whether to pause the container before committing"
        required: false
        type: "boolean"
        default: true
      - name: "changes"
        in: "query"
        description: "`Dockerfile` instructions to apply while committing"
        required: false
        type: "string"
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/definitions/IdResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /events:
    get:
      tags:
      - "System"
      summary: "Monitor events"
      description: "Stream real-time events from the server.\n\nVarious objects within\
        \ Docker report events when something happens to them.\n\nContainers report\
        \ these events: `attach, commit, copy, create, destroy, detach, die, exec_create,\
        \ exec_detach, exec_start, export, kill, oom, pause, rename, resize, restart,\
        \ start, stop, top, unpause, update`\n\nImages report these events: `delete,\
        \ import, load, pull, push, save, tag, untag`\n\nVolumes report these events:\
        \ `create, mount, unmount, destroy`\n\nNetworks report these events: `create,\
        \ connect, disconnect, destroy`\n\nThe Docker daemon reports these events:\
        \ `reload`\n"
      operationId: "SystemEvents"
      produces:
      - "application/json"
      parameters:
      - name: "since"
        in: "query"
        description: "Show events created since this timestamp then stream new events."
        required: false
        type: "string"
      - name: "until"
        in: "query"
        description: "Show events created until this timestamp then stop streaming."
        required: false
        type: "string"
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of filters (a `map[string][]string`) to\
          \ process on the event list. Available filters:\n\n- `container=<string>`\
          \ container name or ID\n- `event=<string>` event type\n- `image=<string>`\
          \ image name or ID\n- `label=<string>` image or container label\n- `type=<string>`\
          \ object to filter by, one of `container`, `image`, `volume`, `network`,\
          \ or `daemon`\n- `volume=<string>` volume name or ID\n- `network=<string>`\
          \ network name or ID\n- `daemon=<string>` daemon name or ID\n"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/inline_response_200_12"
          examples:
            application/json:
              Type: "container"
              Action: "create"
              Actor:
                ID: "ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743"
                Attributes:
                  com.example.some-label: "some-label-value"
                  image: "alpine"
                  name: "my-container"
              time: 1461943101
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /system/df:
    get:
      tags:
      - "System"
      summary: "Get data usage information"
      operationId: "SystemDataUsage"
      parameters: []
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/inline_response_200_13"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/{name}/get:
    get:
      tags:
      - "Image"
      summary: "Export an image"
      description: "Get a tarball containing all images and metadata for a repository.\n\
        \nIf `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that\
        \ image (and its parents) are returned. If `name` is an image ID, similarly\
        \ only that image (and its parents) are returned, but with the exclusion of\
        \ the `repositories` file in the tarball, as there were no image names referenced.\n\
        \n### Image tarball format\n\nAn image tarball contains one directory per\
        \ image layer (named using its long ID), each containing these files:\n\n\
        - `VERSION`: currently `1.0` - the file format version\n- `json`: detailed\
        \ layer information, similar to `docker inspect layer_id`\n- `layer.tar`:\
        \ A tarfile containing the filesystem changes in this layer\n\nThe `layer.tar`\
        \ file contains `aufs` style `.wh..wh.aufs` files and directories for storing\
        \ attribute changes and deletions.\n\nIf the tarball defines a repository,\
        \ the tarball should also include a `repositories` file at the root that contains\
        \ a list of repository and tag names mapped to layer IDs.\n\n```json\n{\n\
        \  \"hello-world\": {\n    \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"\
        \n  }\n}\n```\n"
      operationId: "ImageGet"
      produces:
      - "application/x-tar"
      parameters:
      - name: "name"
        in: "path"
        description: "Image name or ID"
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/get:
    get:
      tags:
      - "Image"
      summary: "Export several images"
      description: "Get a tarball containing all images and metadata for several image\
        \ repositories.\n\nFor each value of the `names` parameter: if it is a specific\
        \ name and tag (e.g. `ubuntu:latest`), then only that image (and its parents)\
        \ are returned; if it is an image ID, similarly only that image (and its parents)\
        \ are returned and there would be no names referenced in the 'repositories'\
        \ file for this image ID.\n\nFor details on the format, see [the export image\
        \ endpoint](#operation/ImageGet).\n"
      operationId: "ImageGetAll"
      produces:
      - "application/x-tar"
      parameters:
      - name: "names"
        in: "query"
        description: "Image names to filter by"
        required: false
        type: "array"
        items:
          type: "string"
      responses:
        200:
          description: "no error"
          schema:
            type: "string"
            format: "binary"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /images/load:
    post:
      tags:
      - "Image"
      summary: "Import images"
      description: "Load a set of images and tags into a repository.\n\nFor details\
        \ on the format, see [the export image endpoint](#operation/ImageGet).\n"
      operationId: "ImageLoad"
      consumes:
      - "application/x-tar"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "imagesTarball"
        description: "Tar archive containing images"
        required: false
        schema:
          type: "string"
          format: "binary"
      - name: "quiet"
        in: "query"
        description: "Suppress progress details during load."
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /containers/{id}/exec:
    post:
      tags:
      - "Exec"
      summary: "Create an exec instance"
      description: "Run a command inside a running container."
      operationId: "ContainerExec"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "execConfig"
        description: "Exec configuration"
        required: true
        schema:
          $ref: "#/definitions/execConfig"
      - name: "id"
        in: "path"
        description: "ID or name of container"
        required: true
        type: "string"
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/definitions/IdResponse"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        409:
          description: "container is paused"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /exec/{id}/start:
    post:
      tags:
      - "Exec"
      summary: "Start an exec instance"
      description: "Starts a previously set up exec instance. If detach is true, this\
        \ endpoint returns immediately after starting the command. Otherwise, it sets\
        \ up an interactive session with the command."
      operationId: "ExecStart"
      consumes:
      - "application/json"
      produces:
      - "application/vnd.docker.raw-stream"
      parameters:
      - in: "body"
        name: "execStartConfig"
        required: false
        schema:
          $ref: "#/definitions/execStartConfig"
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
      responses:
        200:
          description: "No error"
        404:
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "Container is stopped or paused"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /exec/{id}/resize:
    post:
      tags:
      - "Exec"
      summary: "Resize an exec instance"
      description: "Resize the TTY session used by an exec instance. This endpoint\
        \ only works if `tty` was specified as part of creating and starting the exec\
        \ instance."
      operationId: "ExecResize"
      parameters:
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
      - name: "h"
        in: "query"
        description: "Height of the TTY session in characters"
        required: false
        type: "integer"
      - name: "w"
        in: "query"
        description: "Width of the TTY session in characters"
        required: false
        type: "integer"
      responses:
        201:
          description: "No error"
        404:
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /exec/{id}/json:
    get:
      tags:
      - "Exec"
      summary: "Inspect an exec instance"
      description: "Return low-level information about an exec instance."
      operationId: "ExecInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Exec instance ID"
        required: true
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/inline_response_200_14"
          examples:
            application/json:
              CanRemove: false
              ContainerID: "b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126"
              DetachKeys: ""
              ExitCode: 2
              ID: "f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b"
              OpenStderr: true
              OpenStdin: true
              OpenStdout: true
              ProcessConfig:
                arguments:
                - "-c"
                - "exit 2"
                entrypoint: "sh"
                privileged: false
                tty: true
                user: "1000"
              Running: false
              Pid: 42000
        404:
          description: "No such exec instance"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /volumes:
    get:
      tags:
      - "Volume"
      summary: "List volumes"
      operationId: "VolumeList"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "JSON encoded value of the filters (a `map[string][]string`)\
          \ to\nprocess on the volumes list. Available filters:\n\n- `name=<volume-name>`\
          \ Matches all or part of a volume name.\n- `dangling=<boolean>` When set\
          \ to `true` (or `1`), returns all\n   volumes that are not in use by a container.\
          \ When set to `false`\n   (or `0`), only volumes that are in use by one\
          \ or more\n   containers are returned.\n- `driver=<volume-driver-name>`\
          \ Matches all or part of a volume\n  driver name.\n"
        required: false
        type: "string"
        format: "json"
      responses:
        200:
          description: "Summary volume data that matches the query"
          schema:
            $ref: "#/definitions/inline_response_200_15"
          examples:
            application/json:
              Volumes:
              - Name: "tardis"
                Driver: "local"
                Mountpoint: "/var/lib/docker/volumes/tardis"
                Labels:
                  com.example.some-label: "some-value"
                  com.example.some-other-label: "some-other-value"
                Scope: "local"
                Options:
                  device: "tmpfs"
                  o: "size=100m,uid=1000"
                  type: "tmpfs"
              Warnings: []
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /volumes/create:
    post:
      tags:
      - "Volume"
      summary: "Create a volume"
      operationId: "VolumeCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "volumeConfig"
        description: "Volume configuration"
        required: true
        schema:
          $ref: "#/definitions/volumeConfig"
      responses:
        201:
          description: "The volume was created successfully"
          schema:
            $ref: "#/definitions/Volume"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /volumes/{name}:
    get:
      tags:
      - "Volume"
      summary: "Inspect a volume"
      operationId: "VolumeInspect"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Volume name or ID"
        required: true
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/Volume"
        404:
          description: "No such volume"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "Volume"
      summary: "Remove a volume"
      description: "Instruct the driver to remove the volume."
      operationId: "VolumeDelete"
      parameters:
      - name: "name"
        in: "path"
        description: "Volume name or ID"
        required: true
        type: "string"
      - name: "force"
        in: "query"
        description: "Force the removal of the volume"
        required: false
        type: "boolean"
        default: false
      responses:
        204:
          description: "The volume was removed"
        404:
          description: "No such volume or volume driver"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "Volume is in use and cannot be removed"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /volumes/prune:
    post:
      tags:
      - "Volume"
      summary: "Delete unused volumes"
      operationId: "VolumePrune"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\
          \nAvailable filters:\n"
        required: false
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/inline_response_200_16"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks:
    get:
      tags:
      - "Network"
      summary: "List networks"
      operationId: "NetworkList"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the networks list. Available filters:\n\n- `driver=<driver-name>`\
          \ Matches a network's driver.\n- `id=<network-id>` Matches all or part of\
          \ a network ID.\n- `label=<key>` or `label=<key>=<value>` of a network label.\n\
          - `name=<network-name>` Matches all or part of a network name.\n- `type=[\"\
          custom\"|\"builtin\"]` Filters networks by type. The `custom` keyword returns\
          \ all user-defined networks.\n"
        required: false
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Network"
          examples:
            application/json:
            - Name: "bridge"
              Id: "f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566"
              Created: "2016-10-19T06:21:00.416543526Z"
              Scope: "local"
              Driver: "bridge"
              EnableIPv6: false
              Internal: false
              IPAM:
                Driver: "default"
                Config:
                - Subnet: "172.17.0.0/16"
              Containers:
                39b69226f9d79f5634485fb236a23b2fe4e96a0a94128390a7fbbcc167065867:
                  EndpointID: "ed2419a97c1d9954d05b46e462e7002ea552f216e9b136b80a7db8d98b442eda"
                  MacAddress: "02:42:ac:11:00:02"
                  IPv4Address: "172.17.0.2/16"
                  IPv6Address: ""
              Options:
                com.docker.network.bridge.default_bridge: "true"
                com.docker.network.bridge.enable_icc: "true"
                com.docker.network.bridge.enable_ip_masquerade: "true"
                com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
                com.docker.network.bridge.name: "docker0"
                com.docker.network.driver.mtu: "1500"
            - Name: "none"
              Id: "e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794"
              Created: "0001-01-01T00:00:00Z"
              Scope: "local"
              Driver: "null"
              EnableIPv6: false
              Internal: false
              IPAM:
                Driver: "default"
                Config: []
              Containers: {}
              Options: {}
            - Name: "host"
              Id: "13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e"
              Created: "0001-01-01T00:00:00Z"
              Scope: "local"
              Driver: "host"
              EnableIPv6: false
              Internal: false
              IPAM:
                Driver: "default"
                Config: []
              Containers: {}
              Options: {}
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/{id}:
    get:
      tags:
      - "Network"
      summary: "Inspect a network"
      operationId: "NetworkInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Network ID or name"
        required: true
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/Network"
        404:
          description: "Network not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "Network"
      summary: "Remove a network"
      operationId: "NetworkDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "Network ID or name"
        required: true
        type: "string"
      responses:
        204:
          description: "No error"
        404:
          description: "no such network"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/create:
    post:
      tags:
      - "Network"
      summary: "Create a network"
      operationId: "NetworkCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "networkConfig"
        description: "Network configuration"
        required: true
        schema:
          $ref: "#/definitions/networkConfig"
      responses:
        201:
          description: "No error"
          schema:
            $ref: "#/definitions/inline_response_201_1"
        403:
          description: "operation not supported for pre-defined networks"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "plugin not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/{id}/connect:
    post:
      tags:
      - "Network"
      summary: "Connect a container to a network"
      operationId: "NetworkConnect"
      consumes:
      - "application/octet-stream"
      parameters:
      - name: "id"
        in: "path"
        description: "Network ID or name"
        required: true
        type: "string"
      - in: "body"
        name: "container"
        required: true
        schema:
          $ref: "#/definitions/container"
      responses:
        200:
          description: "No error"
        403:
          description: "Operation not supported for swarm scoped networks"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Network or container not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/{id}/disconnect:
    post:
      tags:
      - "Network"
      summary: "Disconnect a container from a network"
      operationId: "NetworkDisconnect"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Network ID or name"
        required: true
        type: "string"
      - in: "body"
        name: "container"
        required: true
        schema:
          $ref: "#/definitions/container_1"
      responses:
        200:
          description: "No error"
        403:
          description: "Operation not supported for swarm scoped networks"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Network or container not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /networks/prune:
    post:
      tags:
      - "Network"
      summary: "Delete unused networks"
      operationId: "NetworkPrune"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\
          \nAvailable filters:\n"
        required: false
        type: "string"
      responses:
        200:
          description: "No error"
          schema:
            $ref: "#/definitions/inline_response_200_17"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins:
    get:
      tags:
      - "Plugin"
      summary: "List plugins"
      description: "Returns information about installed plugins."
      operationId: "PluginList"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "No error"
          schema:
            type: "array"
            example:
            - Id: "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
              Name: "tiborvass/sample-volume-plugin"
              Tag: "latest"
              Active: true
              Settings:
                Env:
                - "DEBUG=0"
                Args: null
                Devices: null
              Config:
                Description: "A sample volume plugin for Docker"
                Documentation: "https://docs.docker.com/engine/extend/plugins/"
                Interface:
                  Types:
                  - "docker.volumedriver/1.0"
                  Socket: "plugins.sock"
                Entrypoint:
                - "/usr/bin/sample-volume-plugin"
                - "/data"
                WorkDir: ""
                User: {}
                Network:
                  Type: ""
                Linux:
                  Capabilities: null
                  AllowAllDevices: false
                  Devices: null
                Mounts: null
                PropagatedMount: "/data"
                Env:
                - Name: "DEBUG"
                  Description: "If set, prints debug messages"
                  Settable: null
                  Value: "0"
                Args:
                  Name: "args"
                  Description: "command line arguments"
                  Settable: null
                  Value: []
            items:
              $ref: "#/definitions/Plugin"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/privileges:
    get:
      tags:
      - "Plugin"
      summary: "Get plugin privileges"
      operationId: "GetPluginPrivileges"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of the plugin. The `:latest` tag is optional, and is\
          \ the default if omitted."
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            example:
            - Name: "network"
              Description: ""
              Value:
              - "host"
            - Name: "mount"
              Description: ""
              Value:
              - "/data"
            - Name: "device"
              Description: ""
              Value:
              - "/dev/cpu_dma_latency"
            items:
              $ref: "#/definitions/inline_response_200_18"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/pull:
    post:
      tags:
      - "Plugin"
      summary: "Install a plugin"
      description: "Pulls and installs a plugin. After the plugin is installed, it\
        \ can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).\n"
      operationId: "PluginPull"
      produces:
      - "application/json"
      parameters:
      - name: "remote"
        in: "query"
        description: "Remote reference for plugin to install.\n\nThe `:latest` tag\
          \ is optional, and is used as the default if omitted.\n"
        required: true
        type: "string"
      - name: "name"
        in: "query"
        description: "Local name for the pulled plugin.\n\nThe `:latest` tag is optional,\
          \ and is used as the default if omitted.\n"
        required: false
        type: "string"
      - name: "X-Registry-Auth"
        in: "header"
        description: "A base64-encoded auth configuration to use when pulling a plugin\
          \ from a registry. [See the authentication section for details.](#section/Authentication)"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/body"
          example: "[{\"Name\":\"network\",\"Description\":\"\",\"Value\":[\"host\"\
            ]},{\"Name\":\"mount\",\"Description\":\"\",\"Value\":[\"/data\"]},{\"\
            Name\":\"device\",\"Description\":\"\",\"Value\":[\"/dev/cpu_dma_latency\"\
            ]}]"
      responses:
        204:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/{name}/json:
    get:
      tags:
      - "Plugin"
      summary: "Inspect a plugin"
      operationId: "PluginInspect"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the plugin. The `:latest` tag is optional, and is\
          \ the default if omitted."
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/Plugin"
        404:
          description: "plugin is not installed"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/{name}:
    delete:
      tags:
      - "Plugin"
      summary: "Remove a plugin"
      operationId: "PluginDelete"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the plugin. The `:latest` tag is optional, and is\
          \ the default if omitted."
        required: true
        type: "string"
      - name: "force"
        in: "query"
        description: "Disable the plugin before removing. This may result in issues\
          \ if the plugin is in use by a container."
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/Plugin"
        404:
          description: "plugin is not installed"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/{name}/enable:
    post:
      tags:
      - "Plugin"
      summary: "Enable a plugin"
      operationId: "PluginEnable"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the plugin. The `:latest` tag is optional, and is\
          \ the default if omitted."
        required: true
        type: "string"
      - name: "timeout"
        in: "query"
        description: "Set the HTTP client timeout (in seconds)"
        required: false
        type: "integer"
        default: 0
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/{name}/disable:
    post:
      tags:
      - "Plugin"
      summary: "Disable a plugin"
      operationId: "PluginDisable"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the plugin. The `:latest` tag is optional, and is\
          \ the default if omitted."
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/create:
    post:
      tags:
      - "Plugin"
      summary: "Create a plugin"
      operationId: "PluginCreate"
      consumes:
      - "application/x-tar"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of the plugin. The `:latest` tag is optional, and is\
          \ the default if omitted."
        required: true
        type: "string"
      - in: "body"
        name: "tarContext"
        description: "Path to tar containing plugin rootfs and manifest"
        required: false
        schema:
          type: "string"
          format: "binary"
      responses:
        204:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/{name}/push:
    post:
      tags:
      - "Plugin"
      summary: "Push a plugin"
      description: "Push a plugin to the registry.\n"
      operationId: "PluginPush"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the plugin. The `:latest` tag is optional, and is\
          \ the default if omitted."
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
        404:
          description: "plugin not installed"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /plugins/{name}/set:
    post:
      tags:
      - "Plugin"
      summary: "Configure a plugin"
      operationId: "PluginSet"
      consumes:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "The name of the plugin. The `:latest` tag is optional, and is\
          \ the default if omitted."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
          example: "[\"DEBUG=1\"]"
      responses:
        204:
          description: "No error"
        404:
          description: "Plugin not installed"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /nodes:
    get:
      tags:
      - "Node"
      summary: "List nodes"
      operationId: "NodeList"
      parameters:
      - name: "filters"
        in: "query"
        description: "Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).\n\
          \nAvailable filters:\n- `id=<node id>`\n- `label=<engine label>`\n- `membership=`(`accepted`|`pending`)`\n\
          - `name=<node name>`\n- `role=`(`manager`|`worker`)`\n"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Node"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /nodes/{id}:
    get:
      tags:
      - "Node"
      summary: "Inspect a node"
      operationId: "NodeInspect"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID or name of the node"
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/Node"
        404:
          description: "no such node"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "Node"
      summary: "Delete a node"
      operationId: "NodeDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID or name of the node"
        required: true
        type: "string"
      - name: "force"
        in: "query"
        description: "Force remove a node from the swarm"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "no error"
        404:
          description: "no such node"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /nodes/{id}/update:
    post:
      tags:
      - "Node"
      summary: "Update a node"
      operationId: "NodeUpdate"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID of the node"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/NodeSpec"
      - name: "version"
        in: "query"
        description: "The version number of the node object being updated. This is\
          \ required to avoid conflicting writes."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "no error"
        404:
          description: "no such node"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swarm:
    get:
      tags:
      - "Swarm"
      summary: "Inspect swarm"
      operationId: "SwarmInspect"
      parameters: []
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swarm/init:
    post:
      tags:
      - "Swarm"
      summary: "Initialize a new swarm"
      operationId: "SwarmInit"
      produces:
      - "application/json"
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_1"
      responses:
        200:
          description: "no error"
          schema:
            type: "string"
            example: "7v2t30z9blmxuhnyo6s4cpenp"
            description: "The node ID"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        406:
          description: "node is already part of a swarm"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swarm/join:
    post:
      tags:
      - "Swarm"
      summary: "Join an existing swarm"
      operationId: "SwarmJoin"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_2"
      responses:
        200:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
        503:
          description: "node is already part of a swarm"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swarm/leave:
    post:
      tags:
      - "Swarm"
      summary: "Leave a swarm"
      operationId: "SwarmLeave"
      parameters:
      - name: "force"
        in: "query"
        description: "Force leave swarm, even if this is the last manager or that\
          \ it will break the cluster."
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swarm/update:
    post:
      tags:
      - "Swarm"
      summary: "Update a swarm"
      operationId: "SwarmUpdate"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SwarmSpec"
      - name: "version"
        in: "query"
        description: "The version number of the swarm object being updated. This is\
          \ required to avoid conflicting writes."
        required: true
        type: "integer"
        format: "int64"
      - name: "rotateWorkerToken"
        in: "query"
        description: "Rotate the worker join token."
        required: false
        type: "boolean"
        default: false
      - name: "rotateManagerToken"
        in: "query"
        description: "Rotate the manager join token."
        required: false
        type: "boolean"
        default: false
      - name: "rotateManagerUnlockKey"
        in: "query"
        description: "Rotate the manager unlock key."
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "no error"
        400:
          description: "bad parameter"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
        503:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swarm/unlockkey:
    get:
      tags:
      - "Swarm"
      summary: "Get the unlock key"
      operationId: "SwarmUnlockkey"
      consumes:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/inline_response_200_19"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swarm/unlock:
    post:
      tags:
      - "Swarm"
      summary: "Unlock a locked manager"
      operationId: "SwarmUnlock"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/body_3"
      responses:
        200:
          description: "no error"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /services:
    get:
      tags:
      - "Service"
      summary: "List services"
      operationId: "ServiceList"
      parameters:
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the services list. Available filters:\n\n- `id=<service\
          \ id>`\n- `name=<service name>`\n- `label=<service label>`\n"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /services/create:
    post:
      tags:
      - "Service"
      summary: "Create a service"
      operationId: "ServiceCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          allOf:
          - $ref: "#/definitions/ServiceSpec"
          - type: "object"
            example:
              Name: "web"
              TaskTemplate:
                ContainerSpec:
                  Image: "nginx:alpine"
                  Mounts:
                  - ReadOnly: true
                    Source: "web-data"
                    Target: "/usr/share/nginx/html"
                    Type: "volume"
                    VolumeOptions:
                      DriverConfig: {}
                      Labels:
                        com.example.something: "something-value"
                  User: "33"
                  DNSConfig:
                    Nameservers:
                    - "8.8.8.8"
                    Search:
                    - "example.org"
                    Options:
                    - "timeout:3"
                LogDriver:
                  Name: "json-file"
                  Options:
                    max-file: "3"
                    max-size: "10M"
                Placement: {}
                Resources:
                  Limits:
                    MemoryBytes: 104857600
                  Reservations: {}
                RestartPolicy:
                  Condition: "on-failure"
                  Delay: 10000000000
                  MaxAttempts: 10
              Mode:
                Replicated:
                  Replicas: 4
              UpdateConfig:
                Delay: 30000000000
                Parallelism: 2
                FailureAction: "pause"
              EndpointSpec:
                Ports:
                - Protocol: "tcp"
                  PublishedPort: 8080
                  TargetPort: 80
              Labels:
                foo: "bar"
      - name: "X-Registry-Auth"
        in: "header"
        description: "A base64-encoded auth configuration for pulling from private\
          \ registries. [See the authentication section for details.](#section/Authentication)"
        required: false
        type: "string"
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/definitions/inline_response_201_2"
        403:
          description: "network is not eligible for services"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "name conflicts with an existing service"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
        503:
          description: "server error or node is not part of a swarm"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /services/{id}:
    get:
      tags:
      - "Service"
      summary: "Inspect a service"
      operationId: "ServiceInspect"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of service."
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/Service"
        404:
          description: "no such service"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "Service"
      summary: "Delete a service"
      operationId: "ServiceDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of service."
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
        404:
          description: "no such service"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /services/{id}/update:
    post:
      tags:
      - "Service"
      summary: "Update a service"
      operationId: "ServiceUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of service."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: true
        schema:
          allOf:
          - $ref: "#/definitions/ServiceSpec"
          - type: "object"
            example:
              Name: "top"
              TaskTemplate:
                ContainerSpec:
                  Image: "busybox"
                  Args:
                  - "top"
                Resources:
                  Limits: {}
                  Reservations: {}
                RestartPolicy:
                  Condition: "any"
                  MaxAttempts: 0
                Placement: {}
                ForceUpdate: 0
              Mode:
                Replicated:
                  Replicas: 1
              UpdateConfig:
                Parallelism: 1
                Monitor: 15000000000
                MaxFailureRatio: 0.15
              EndpointSpec:
                Mode: "vip"
      - name: "version"
        in: "query"
        description: "The version number of the service object being updated. This\
          \ is required to avoid conflicting writes."
        required: true
        type: "integer"
      - name: "registryAuthFrom"
        in: "query"
        description: "If the X-Registry-Auth header is not specified, this parameter\
          \ indicates where to find registry authorization credentials. The valid\
          \ values are `spec` and `previous-spec`."
        required: false
        type: "string"
        default: "spec"
      - name: "X-Registry-Auth"
        in: "header"
        description: "A base64-encoded auth configuration for pulling from private\
          \ registries. [See the authentication section for details.](#section/Authentication)"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/ImageDeleteResponse"
        404:
          description: "no such service"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /services/{id}/logs:
    get:
      tags:
      - "Service"
      summary: "Get service logs"
      description: "Get `stdout` and `stderr` logs from a service.\n\n**Note**: This\
        \ endpoint works only for services with the `json-file` or `journald` logging\
        \ drivers.\n"
      operationId: "ServiceLogs"
      produces:
      - "application/vnd.docker.raw-stream"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID or name of the container"
        required: true
        type: "string"
      - name: "details"
        in: "query"
        description: "Show extra details provided to logs."
        required: false
        type: "boolean"
        default: false
      - name: "follow"
        in: "query"
        description: "Return the logs as a stream.\n\nThis will return a `101` HTTP\
          \ response with a `Connection: upgrade` header, then hijack the HTTP connection\
          \ to send raw output. For more information about hijacking and the stream\
          \ format, [see the documentation for the attach endpoint](#operation/ContainerAttach).\n"
        required: false
        type: "boolean"
        default: false
      - name: "stdout"
        in: "query"
        description: "Return logs from `stdout`"
        required: false
        type: "boolean"
        default: false
      - name: "stderr"
        in: "query"
        description: "Return logs from `stderr`"
        required: false
        type: "boolean"
        default: false
      - name: "since"
        in: "query"
        description: "Only return logs since this time, as a UNIX timestamp"
        required: false
        type: "integer"
        default: 0
      - name: "timestamps"
        in: "query"
        description: "Add timestamps to every log line"
        required: false
        type: "boolean"
        default: false
      - name: "tail"
        in: "query"
        description: "Only return this number of log lines from the end of the logs.\
          \ Specify as an integer or `all` to output all log lines."
        required: false
        type: "string"
        default: "all"
      responses:
        101:
          description: "logs returned as a stream"
          schema:
            type: "string"
            format: "binary"
        200:
          description: "logs returned as a string in response body"
          schema:
            type: "string"
        404:
          description: "no such container"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "No such container: c2ada9df5af8"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tasks:
    get:
      tags:
      - "Task"
      summary: "List tasks"
      operationId: "TaskList"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the tasks list. Available filters:\n\n- `id=<task id>`\n\
          - `name=<task name>`\n- `service=<service name>`\n- `node=<node id or name>`\n\
          - `label=key` or `label=\"key=value\"`\n- `desired-state=(running | shutdown\
          \ | accepted)`\n"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            example:
            - ID: "0kzzo1i0y4jz6027t0k7aezc7"
              Version:
                Index: 71
              CreatedAt: "2016-06-07T21:07:31.171892745Z"
              UpdatedAt: "2016-06-07T21:07:31.376370513Z"
              Spec:
                ContainerSpec:
                  Image: "redis"
                Resources:
                  Limits: {}
                  Reservations: {}
                RestartPolicy:
                  Condition: "any"
                  MaxAttempts: 0
                Placement: {}
              ServiceID: "9mnpnzenvg8p8tdbtq4wvbkcz"
              Slot: 1
              NodeID: "60gvrl6tm78dmak4yl7srz94v"
              Status:
                Timestamp: "2016-06-07T21:07:31.290032978Z"
                State: "running"
                Message: "started"
                ContainerStatus:
                  ContainerID: "e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035"
                  PID: 677
              DesiredState: "running"
              NetworksAttachments:
              - Network:
                  ID: "4qvuz4ko70xaltuqbt8956gd1"
                  Version:
                    Index: 18
                  CreatedAt: "2016-06-07T20:31:11.912919752Z"
                  UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                  Spec:
                    Name: "ingress"
                    Labels:
                      com.docker.swarm.internal: "true"
                    DriverConfiguration: {}
                    IPAMOptions:
                      Driver: {}
                      Configs:
                      - Subnet: "10.255.0.0/16"
                        Gateway: "10.255.0.1"
                  DriverState:
                    Name: "overlay"
                    Options:
                      com.docker.network.driver.overlay.vxlanid_list: "256"
                  IPAMOptions:
                    Driver:
                      Name: "default"
                    Configs:
                    - Subnet: "10.255.0.0/16"
                      Gateway: "10.255.0.1"
                Addresses:
                - "10.255.0.10/16"
            - ID: "1yljwbmlr8er2waf8orvqpwms"
              Version:
                Index: 30
              CreatedAt: "2016-06-07T21:07:30.019104782Z"
              UpdatedAt: "2016-06-07T21:07:30.231958098Z"
              Name: "hopeful_cori"
              Spec:
                ContainerSpec:
                  Image: "redis"
                Resources:
                  Limits: {}
                  Reservations: {}
                RestartPolicy:
                  Condition: "any"
                  MaxAttempts: 0
                Placement: {}
              ServiceID: "9mnpnzenvg8p8tdbtq4wvbkcz"
              Slot: 1
              NodeID: "60gvrl6tm78dmak4yl7srz94v"
              Status:
                Timestamp: "2016-06-07T21:07:30.202183143Z"
                State: "shutdown"
                Message: "shutdown"
                ContainerStatus:
                  ContainerID: "1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213"
              DesiredState: "shutdown"
              NetworksAttachments:
              - Network:
                  ID: "4qvuz4ko70xaltuqbt8956gd1"
                  Version:
                    Index: 18
                  CreatedAt: "2016-06-07T20:31:11.912919752Z"
                  UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                  Spec:
                    Name: "ingress"
                    Labels:
                      com.docker.swarm.internal: "true"
                    DriverConfiguration: {}
                    IPAMOptions:
                      Driver: {}
                      Configs:
                      - Subnet: "10.255.0.0/16"
                        Gateway: "10.255.0.1"
                  DriverState:
                    Name: "overlay"
                    Options:
                      com.docker.network.driver.overlay.vxlanid_list: "256"
                  IPAMOptions:
                    Driver:
                      Name: "default"
                    Configs:
                    - Subnet: "10.255.0.0/16"
                      Gateway: "10.255.0.1"
                Addresses:
                - "10.255.0.5/16"
            items:
              $ref: "#/definitions/Task"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tasks/{id}:
    get:
      tags:
      - "Task"
      summary: "Inspect a task"
      operationId: "TaskInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the task"
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/Task"
        404:
          description: "no such task"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /secrets:
    get:
      tags:
      - "Secret"
      summary: "List secrets"
      operationId: "SecretList"
      produces:
      - "application/json"
      parameters:
      - name: "filters"
        in: "query"
        description: "A JSON encoded value of the filters (a `map[string][]string`)\
          \ to process on the secrets list. Available filters:\n\n- `names=<secret\
          \ name>`\n"
        required: false
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            type: "array"
            example:
            - ID: "ktnbjxoalbkvbvedmg1urrz8h"
              Version:
                Index: 11
              CreatedAt: "2016-11-05T01:20:17.327670065Z"
              UpdatedAt: "2016-11-05T01:20:17.327670065Z"
              Spec:
                Name: "app-dev.crt"
            items:
              $ref: "#/definitions/Secret"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /secrets/create:
    post:
      tags:
      - "Secret"
      summary: "Create a secret"
      operationId: "SecretCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          allOf:
          - $ref: "#/definitions/SecretSpec"
          - type: "object"
            example:
              Name: "app-key.crt"
              Labels:
                foo: "bar"
              Data: "VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg=="
      responses:
        201:
          description: "no error"
          schema:
            $ref: "#/definitions/inline_response_201_3"
        406:
          description: "server error or node is not part of a swarm"
          schema:
            $ref: "#/definitions/ErrorResponse"
        409:
          description: "name conflicts with an existing object"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /secrets/{id}:
    get:
      tags:
      - "Secret"
      summary: "Inspect a secret"
      operationId: "SecretInspect"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the secret"
        required: true
        type: "string"
      responses:
        200:
          description: "no error"
          schema:
            $ref: "#/definitions/Secret"
        404:
          description: "secret not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        406:
          description: "node is not part of a swarm"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "Secret"
      summary: "Delete a secret"
      operationId: "SecretDelete"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the secret"
        required: true
        type: "string"
      responses:
        204:
          description: "no error"
        404:
          description: "secret not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "server error"
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  Port:
    type: "object"
    required:
    - "PrivatePort"
    - "Type"
    properties:
      IP:
        type: "string"
        format: "ip-address"
        x-dataType: "Text"
      PrivatePort:
        type: "integer"
        format: "uint16"
        description: "Port on the container"
        x-nullable: false
        x-dataType: "Int"
      PublicPort:
        type: "integer"
        format: "uint16"
        description: "Port exposed on the host"
        x-dataType: "Int"
      Type:
        type: "string"
        enum:
        - "tcp"
        - "udp"
        x-nullable: false
        x-dataType: "E'Type"
    description: "An open port on a container"
    example:
      PrivatePort: 8080
      PublicPort: 80
      Type: "tcp"
  MountPoint:
    type: "object"
    properties:
      Type:
        type: "string"
        x-dataType: "Text"
      Name:
        type: "string"
        x-dataType: "Text"
      Source:
        type: "string"
        x-dataType: "Text"
      Destination:
        type: "string"
        x-dataType: "Text"
      Driver:
        type: "string"
        x-dataType: "Text"
      Mode:
        type: "string"
        x-dataType: "Text"
      RW:
        type: "boolean"
        x-dataType: "Bool"
      Propagation:
        type: "string"
        x-dataType: "Text"
    description: "A mount point inside a container"
  DeviceMapping:
    type: "object"
    properties:
      PathOnHost:
        type: "string"
        x-dataType: "Text"
      PathInContainer:
        type: "string"
        x-dataType: "Text"
      CgroupPermissions:
        type: "string"
        x-dataType: "Text"
    description: "A device mapping between the host and container"
    example:
      PathOnHost: "/dev/deviceName"
      PathInContainer: "/dev/deviceName"
      CgroupPermissions: "mrw"
  ThrottleDevice:
    type: "object"
    properties:
      Path:
        type: "string"
        description: "Device path"
        x-dataType: "Text"
      Rate:
        type: "integer"
        format: "int64"
        description: "Rate"
        minimum: 0
        x-dataType: "Integer"
  Mount:
    type: "object"
    properties:
      Target:
        type: "string"
        description: "Container path."
        x-dataType: "Text"
      Type:
        type: "string"
        description: "The mount type. Available types:\n\n- `bind` Mounts a file or\
          \ directory from the host into the container. Must exist prior to creating\
          \ the container.\n- `volume` Creates a volume with the given name and options\
          \ (or uses a pre-existing volume with the same name and options). These\
          \ are **not** removed when the container is removed.\n- `tmpfs` Create a\
          \ tmpfs with the given options. The mount source cannot be specified for\
          \ tmpfs.\n"
        enum:
        - "bind"
        - "volume"
        - "tmpfs"
        x-dataType: "E'Type2"
      ReadOnly:
        type: "boolean"
        description: "Whether the mount should be read-only."
        x-dataType: "Bool"
      BindOptions:
        type: "object"
        description: "Optional configuration for the `bind` type."
        properties: {}
        x-dataType: "A.Value"
      VolumeOptions:
        $ref: "#/definitions/Mount_VolumeOptions"
        x-dataType: "MountVolumeOptions"
      TmpfsOptions:
        $ref: "#/definitions/Mount_TmpfsOptions"
        x-dataType: "MountTmpfsOptions"
    example:
      ReadOnly: true
      BindOptions: "{}"
      Target: "Target"
      Type: "bind"
      VolumeOptions:
        NoCopy: false
        DriverConfig:
          Options:
            key: "Options"
          Name: "Name"
        Labels:
          key: "Labels"
      TmpfsOptions:
        Mode: 1
        SizeBytes: 6
  RestartPolicy:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "- `always` Always restart\n- `unless-stopped` Restart always\
          \ except when the user has manually stopped the container\n- `on-failure`\
          \ Restart only when the container exit code is non-zero\n"
        enum:
        - "always"
        - "unless-stopped"
        - "on-failure"
        x-dataType: "E'Name"
      MaximumRetryCount:
        type: "integer"
        description: "If `on-failure` is used, the number of times to retry before\
          \ giving up"
        x-dataType: "Int"
    description: "The behavior to apply when the container exits. The default is not\
      \ to restart.\n\nAn ever increasing delay (double the previous delay, starting\
      \ at 100ms) is added before each restart to prevent flooding the server.\n"
  Resources:
    type: "object"
    properties:
      CpuShares:
        type: "integer"
        description: "An integer value representing this container's relative CPU\
          \ weight versus other containers."
        x-dataType: "Int"
      Memory:
        type: "integer"
        description: "Memory limit in bytes."
        x-dataType: "Int"
      CgroupParent:
        type: "string"
        description: "Path to `cgroups` under which the container's `cgroup` is created.\
          \ If the path is not absolute, the path is considered to be relative to\
          \ the `cgroups` path of the init process. Cgroups are created if they do\
          \ not already exist."
        x-dataType: "Text"
      BlkioWeight:
        type: "integer"
        description: "Block IO weight (relative weight)."
        minimum: 0
        maximum: 1000
        x-dataType: "Int"
      BlkioWeightDevice:
        type: "array"
        description: "Block IO weight (relative device weight) in the form `[{\"Path\"\
          : \"device_path\", \"Weight\": weight}]`.\n"
        items:
          $ref: "#/definitions/Resources_BlkioWeightDevice"
        x-dataType: "[ResourcesBlkioWeightDevice]"
      BlkioDeviceReadBps:
        type: "array"
        description: "Limit read rate (bytes per second) from a device, in the form\
          \ `[{\"Path\": \"device_path\", \"Rate\": rate}]`.\n"
        items:
          $ref: "#/definitions/ThrottleDevice"
        x-dataType: "[ThrottleDevice]"
      BlkioDeviceWriteBps:
        type: "array"
        description: "Limit write rate (bytes per second) to a device, in the form\
          \ `[{\"Path\": \"device_path\", \"Rate\": rate}]`.\n"
        items:
          $ref: "#/definitions/ThrottleDevice"
        x-dataType: "[ThrottleDevice]"
      BlkioDeviceReadIOps:
        type: "array"
        description: "Limit read rate (IO per second) from a device, in the form `[{\"\
          Path\": \"device_path\", \"Rate\": rate}]`.\n"
        items:
          $ref: "#/definitions/ThrottleDevice"
        x-dataType: "[ThrottleDevice]"
      BlkioDeviceWriteIOps:
        type: "array"
        description: "Limit write rate (IO per second) to a device, in the form `[{\"\
          Path\": \"device_path\", \"Rate\": rate}]`.\n"
        items:
          $ref: "#/definitions/ThrottleDevice"
        x-dataType: "[ThrottleDevice]"
      CpuPeriod:
        type: "integer"
        format: "int64"
        description: "The length of a CPU period in microseconds."
        x-dataType: "Integer"
      CpuQuota:
        type: "integer"
        format: "int64"
        description: "Microseconds of CPU time that the container can get in a CPU\
          \ period."
        x-dataType: "Integer"
      CpuRealtimePeriod:
        type: "integer"
        format: "int64"
        description: "The length of a CPU real-time period in microseconds. Set to\
          \ 0 to allocate no time allocated to real-time tasks."
        x-dataType: "Integer"
      CpuRealtimeRuntime:
        type: "integer"
        format: "int64"
        description: "The length of a CPU real-time runtime in microseconds. Set to\
          \ 0 to allocate no time allocated to real-time tasks."
        x-dataType: "Integer"
      CpusetCpus:
        type: "string"
        description: "CPUs in which to allow execution (e.g., `0-3`, `0,1`)"
        x-dataType: "Text"
      CpusetMems:
        type: "string"
        description: "Memory nodes (MEMs) in which to allow execution (0-3, 0,1).\
          \ Only effective on NUMA systems."
        x-dataType: "Text"
      Devices:
        type: "array"
        description: "A list of devices to add to the container."
        items:
          $ref: "#/definitions/DeviceMapping"
        x-dataType: "[DeviceMapping]"
      DiskQuota:
        type: "integer"
        format: "int64"
        description: "Disk limit (in bytes)."
        x-dataType: "Integer"
      KernelMemory:
        type: "integer"
        format: "int64"
        description: "Kernel memory limit in bytes."
        x-dataType: "Integer"
      MemoryReservation:
        type: "integer"
        format: "int64"
        description: "Memory soft limit in bytes."
        x-dataType: "Integer"
      MemorySwap:
        type: "integer"
        format: "int64"
        description: "Total memory limit (memory + swap). Set as `-1` to enable unlimited\
          \ swap."
        x-dataType: "Integer"
      MemorySwappiness:
        type: "integer"
        format: "int64"
        description: "Tune a container's memory swappiness behavior. Accepts an integer\
          \ between 0 and 100."
        minimum: 0
        maximum: 100
        x-dataType: "Integer"
      NanoCPUs:
        type: "integer"
        format: "int64"
        description: "CPU quota in units of 10<sup>-9</sup> CPUs."
        x-dataType: "Integer"
      OomKillDisable:
        type: "boolean"
        description: "Disable OOM Killer for the container."
        x-dataType: "Bool"
      PidsLimit:
        type: "integer"
        format: "int64"
        description: "Tune a container's pids limit. Set -1 for unlimited."
        x-dataType: "Integer"
      Ulimits:
        type: "array"
        description: "A list of resource limits to set in the container. For example:\
          \ `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"\n"
        items:
          $ref: "#/definitions/Resources_Ulimits"
        x-dataType: "[ResourcesUlimits]"
      CpuCount:
        type: "integer"
        format: "int64"
        description: "The number of usable CPUs (Windows only).\n\nOn Windows Server\
          \ containers, the processor resource controls are mutually exclusive. The\
          \ order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent`\
          \ last.\n"
        x-dataType: "Integer"
      CpuPercent:
        type: "integer"
        format: "int64"
        description: "The usable percentage of the available CPUs (Windows only).\n\
          \nOn Windows Server containers, the processor resource controls are mutually\
          \ exclusive. The order of precedence is `CPUCount` first, then `CPUShares`,\
          \ and `CPUPercent` last.\n"
        x-dataType: "Integer"
      IOMaximumIOps:
        type: "integer"
        format: "int64"
        description: "Maximum IOps for the container system drive (Windows only)"
        x-dataType: "Integer"
      IOMaximumBandwidth:
        type: "integer"
        format: "int64"
        description: "Maximum IO in bytes per second for the container system drive\
          \ (Windows only)"
        x-dataType: "Integer"
    description: "A container's resources (cgroups config, ulimits, etc)"
  HostConfig:
    allOf:
    - $ref: "#/definitions/Resources"
    - type: "object"
      properties:
        Binds:
          type: "array"
          description: "A list of volume bindings for this container. Each volume\
            \ binding is a string in one of these forms:\n\n- `host-src:container-dest`\
            \ to bind-mount a host path into the container. Both `host-src`, and `container-dest`\
            \ must be an _absolute_ path.\n- `host-src:container-dest:ro` to make\
            \ the bind-mount read-only inside the container. Both `host-src`, and\
            \ `container-dest` must be an _absolute_ path.\n- `volume-name:container-dest`\
            \ to bind-mount a volume managed by a volume driver into the container.\
            \ `container-dest` must be an _absolute_ path.\n- `volume-name:container-dest:ro`\
            \ to mount the volume read-only inside the container.  `container-dest`\
            \ must be an _absolute_ path.\n"
          items:
            type: "string"
          x-dataType: "[Text]"
        ContainerIDFile:
          type: "string"
          description: "Path to a file where the container ID is written"
          x-dataType: "Text"
        LogConfig:
          $ref: "#/definitions/HostConfig_LogConfig"
          x-dataType: "HostConfigLogConfig"
        NetworkMode:
          type: "string"
          description: "Network mode to use for this container. Supported standard\
            \ values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any\
            \ other value is taken as a custom network's name to which this container\
            \ should connect to."
          x-dataType: "Text"
        PortBindings:
          type: "object"
          description: "A map of exposed container ports and the host port they should\
            \ map to."
          additionalProperties:
            $ref: "#/definitions/HostConfig_PortBindings"
          x-dataType: "(Map.Map String HostConfigPortBindings)"
        RestartPolicy:
          $ref: "#/definitions/RestartPolicy"
          x-dataType: "RestartPolicy"
        AutoRemove:
          type: "boolean"
          description: "Automatically remove the container when the container's process\
            \ exits. This has no effect if `RestartPolicy` is set."
          x-dataType: "Bool"
        VolumeDriver:
          type: "string"
          description: "Driver that this container uses to mount volumes."
          x-dataType: "Text"
        VolumesFrom:
          type: "array"
          description: "A list of volumes to inherit from another container, specified\
            \ in the form `<container name>[:<ro|rw>]`."
          items:
            type: "string"
          x-dataType: "[Text]"
        Mounts:
          type: "array"
          description: "Specification for mounts to be added to the container."
          items:
            $ref: "#/definitions/Mount"
          x-dataType: "[Mount]"
        CapAdd:
          type: "array"
          description: "A list of kernel capabilities to add to the container."
          items:
            type: "string"
          x-dataType: "[Text]"
        CapDrop:
          type: "array"
          description: "A list of kernel capabilities to drop from the container."
          items:
            type: "string"
          x-dataType: "[Text]"
        Dns:
          type: "array"
          description: "A list of DNS servers for the container to use."
          items:
            type: "string"
          x-dataType: "[Text]"
        DnsOptions:
          type: "array"
          description: "A list of DNS options."
          items:
            type: "string"
          x-dataType: "[Text]"
        DnsSearch:
          type: "array"
          description: "A list of DNS search domains."
          items:
            type: "string"
          x-dataType: "[Text]"
        ExtraHosts:
          type: "array"
          description: "A list of hostnames/IP mappings to add to the container's\
            \ `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.\n"
          items:
            type: "string"
          x-dataType: "[Text]"
        GroupAdd:
          type: "array"
          description: "A list of additional groups that the container process will\
            \ run as."
          items:
            type: "string"
          x-dataType: "[Text]"
        IpcMode:
          type: "string"
          description: "IPC namespace to use for the container."
          x-dataType: "Text"
        Cgroup:
          type: "string"
          description: "Cgroup to use for the container."
          x-dataType: "Text"
        Links:
          type: "array"
          description: "A list of links for the container in the form `container_name:alias`."
          items:
            type: "string"
          x-dataType: "[Text]"
        OomScoreAdj:
          type: "integer"
          description: "An integer value containing the score given to the container\
            \ in order to tune OOM killer preferences."
          x-dataType: "Int"
        PidMode:
          type: "string"
          description: "Set the PID (Process) Namespace mode for the container. It\
            \ can be either:\n\n- `\"container:<name|id>\"`: joins another container's\
            \ PID namespace\n- `\"host\"`: use the host's PID namespace inside the\
            \ container\n"
          x-dataType: "Text"
        Privileged:
          type: "boolean"
          description: "Gives the container full access to the host."
          x-dataType: "Bool"
        PublishAllPorts:
          type: "boolean"
          description: "Allocates a random host port for all of a container's exposed\
            \ ports."
          x-dataType: "Bool"
        ReadonlyRootfs:
          type: "boolean"
          description: "Mount the container's root filesystem as read only."
          x-dataType: "Bool"
        SecurityOpt:
          type: "array"
          description: "A list of string values to customize labels for MLS systems,\
            \ such as SELinux."
          items:
            type: "string"
          x-dataType: "[Text]"
        StorageOpt:
          type: "object"
          description: "Storage driver options for this container, in the form `{\"\
            size\": \"120G\"}`.\n"
          additionalProperties:
            type: "string"
          x-dataType: "(Map.Map String Text)"
        Tmpfs:
          type: "object"
          description: "A map of container directories which should be replaced by\
            \ tmpfs mounts, and their corresponding mount options. For example: `{\
            \ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`.\n"
          additionalProperties:
            type: "string"
          x-dataType: "(Map.Map String Text)"
        UTSMode:
          type: "string"
          description: "UTS namespace to use for the container."
          x-dataType: "Text"
        UsernsMode:
          type: "string"
          description: "Sets the usernamespace mode for the container when usernamespace\
            \ remapping option is enabled."
          x-dataType: "Text"
        ShmSize:
          type: "integer"
          description: "Size of `/dev/shm` in bytes. If omitted, the system uses 64MB."
          minimum: 0
          x-dataType: "Int"
        Sysctls:
          type: "object"
          description: "A list of kernel parameters (sysctls) to set in the container.\
            \ For example: `{\"net.ipv4.ip_forward\": \"1\"}`\n"
          additionalProperties:
            type: "string"
          x-dataType: "(Map.Map String Text)"
        Runtime:
          type: "string"
          description: "Runtime to use with this container."
          x-dataType: "Text"
        ConsoleSize:
          type: "array"
          description: "Initial console size, as an `[height, width]` array. (Windows\
            \ only)"
          items:
            type: "integer"
            minimum: 0
          maxItems: 2
          minItems: 2
          x-dataType: "[Int]"
        Isolation:
          type: "string"
          description: "Isolation technology of the container. (Windows only)"
          enum:
          - "default"
          - "process"
          - "hyperv"
          x-dataType: "E'Isolation"
    description: "Container configuration that depends on the host we are running\
      \ on"
  Config:
    type: "object"
    properties:
      Hostname:
        type: "string"
        description: "The hostname to use for the container, as a valid RFC 1123 hostname."
        x-dataType: "Text"
      Domainname:
        type: "string"
        description: "The domain name to use for the container."
        x-dataType: "Text"
      User:
        type: "string"
        description: "The user that commands are run as inside the container."
        x-dataType: "Text"
      AttachStdin:
        type: "boolean"
        description: "Whether to attach to `stdin`."
        default: false
        x-dataType: "Bool"
      AttachStdout:
        type: "boolean"
        description: "Whether to attach to `stdout`."
        default: true
        x-dataType: "Bool"
      AttachStderr:
        type: "boolean"
        description: "Whether to attach to `stderr`."
        default: true
        x-dataType: "Bool"
      ExposedPorts:
        type: "object"
        description: "An object mapping ports to an empty object in the form:\n\n\
          `{\"<port>/<tcp|udp>\": {}}`\n"
        additionalProperties:
          type: "object"
          properties: {}
        x-dataType: "(Map.Map String A.Value)"
      Tty:
        type: "boolean"
        description: "Attach standard streams to a TTY, including `stdin` if it is\
          \ not closed."
        default: false
        x-dataType: "Bool"
      OpenStdin:
        type: "boolean"
        description: "Open `stdin`"
        default: false
        x-dataType: "Bool"
      StdinOnce:
        type: "boolean"
        description: "Close `stdin` after one attached client disconnects"
        default: false
        x-dataType: "Bool"
      Env:
        type: "array"
        description: "A list of environment variables to set inside the container\
          \ in the form `[\"VAR=value\", ...]`\n"
        items:
          type: "string"
        x-dataType: "[Text]"
      Healthcheck:
        $ref: "#/definitions/Config_Healthcheck"
        x-dataType: "ConfigHealthcheck"
      ArgsEscaped:
        type: "boolean"
        description: "Command is already escaped (Windows only)"
        x-dataType: "Bool"
      Image:
        type: "string"
        description: "The name of the image to use when creating the container"
        x-dataType: "Text"
      Volumes:
        $ref: "#/definitions/Config_Volumes"
        x-dataType: "ConfigVolumes"
      WorkingDir:
        type: "string"
        description: "The working directory for commands to run in."
        x-dataType: "Text"
      NetworkDisabled:
        type: "boolean"
        description: "Disable networking for the container."
        x-dataType: "Bool"
      MacAddress:
        type: "string"
        description: "MAC address of the container."
        x-dataType: "Text"
      OnBuild:
        type: "array"
        description: "`ONBUILD` metadata that were defined in the image's `Dockerfile`."
        items:
          type: "string"
        x-dataType: "[Text]"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      StopSignal:
        type: "string"
        description: "Signal to stop a container as a string or unsigned integer."
        default: "SIGTERM"
        x-dataType: "Text"
      StopTimeout:
        type: "integer"
        description: "Timeout to stop a container in seconds."
        x-dataType: "Int"
      Shell:
        type: "array"
        description: "Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell."
        items:
          type: "string"
        x-dataType: "[Text]"
    description: "Configuration for a container that is portable between hosts"
    example:
      StopSignal: "SIGTERM"
      User: "User"
      AttachStderr: true
      ArgsEscaped: true
      Hostname: "Hostname"
      OpenStdin: false
      Labels:
        key: "Labels"
      Healthcheck:
        Test:
        - "Test"
        - "Test"
        Timeout: 6
        Retries: 1
        Interval: 0
      Env:
      - "Env"
      - "Env"
      Image: "Image"
      NetworkDisabled: true
      MacAddress: "MacAddress"
      ExposedPorts:
        key: "{}"
      StdinOnce: false
      AttachStdout: true
      WorkingDir: "WorkingDir"
      Shell:
      - "Shell"
      - "Shell"
      Volumes:
        additionalProperties: "{}"
      OnBuild:
      - "OnBuild"
      - "OnBuild"
      Domainname: "Domainname"
      AttachStdin: false
      Tty: false
      StopTimeout: 5
    x-mimeTypes:
    - "MimeJSON"
  NetworkConfig:
    type: "object"
    properties:
      Bridge:
        type: "string"
        x-dataType: "Text"
      Gateway:
        type: "string"
        x-dataType: "Text"
      Address:
        type: "string"
        x-dataType: "Text"
      IPPrefixLen:
        type: "integer"
        x-dataType: "Int"
      MacAddress:
        type: "string"
        x-dataType: "Text"
      PortMapping:
        type: "string"
        x-dataType: "Text"
      Ports:
        type: "array"
        items:
          $ref: "#/definitions/Port"
        x-dataType: "[Port]"
    description: "TODO: check is correct"
    example:
      Address: "Address"
      Gateway: "Gateway"
      Ports:
      - PrivatePort: 8080
        PublicPort: 80
        Type: "tcp"
      - PrivatePort: 8080
        PublicPort: 80
        Type: "tcp"
      IPPrefixLen: 0
      PortMapping: "PortMapping"
      MacAddress: "MacAddress"
      Bridge: "Bridge"
  GraphDriver:
    type: "object"
    properties:
      Name:
        type: "string"
        x-dataType: "Text"
      Data:
        type: "object"
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
    description: "Information about this container's graph driver."
  Image:
    type: "object"
    properties:
      Id:
        type: "string"
        x-dataType: "Text"
      RepoTags:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      RepoDigests:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Parent:
        type: "string"
        x-dataType: "Text"
      Comment:
        type: "string"
        x-dataType: "Text"
      Created:
        type: "string"
        x-dataType: "Text"
      Container:
        type: "string"
        x-dataType: "Text"
      ContainerConfig:
        $ref: "#/definitions/Config"
        x-dataType: "Config"
      DockerVersion:
        type: "string"
        x-dataType: "Text"
      Author:
        type: "string"
        x-dataType: "Text"
      Config:
        $ref: "#/definitions/Config"
        x-dataType: "Config"
      Architecture:
        type: "string"
        x-dataType: "Text"
      Os:
        type: "string"
        x-dataType: "Text"
      Size:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
      VirtualSize:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
      GraphDriver:
        $ref: "#/definitions/GraphDriver"
        x-dataType: "GraphDriver"
      RootFS:
        $ref: "#/definitions/Image_RootFS"
        x-dataType: "ImageRootFS"
  ImageSummary:
    type: "object"
    required:
    - "Containers"
    - "Created"
    - "Id"
    - "Labels"
    - "ParentId"
    - "RepoDigests"
    - "RepoTags"
    - "SharedSize"
    - "Size"
    - "VirtualSize"
    properties:
      Id:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      ParentId:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      RepoTags:
        type: "array"
        items:
          type: "string"
        x-nullable: false
        x-dataType: "[Text]"
      RepoDigests:
        type: "array"
        items:
          type: "string"
        x-nullable: false
        x-dataType: "[Text]"
      Created:
        type: "integer"
        x-nullable: false
        x-dataType: "Int"
      Size:
        type: "integer"
        x-nullable: false
        x-dataType: "Int"
      SharedSize:
        type: "integer"
        x-nullable: false
        x-dataType: "Int"
      VirtualSize:
        type: "integer"
        x-nullable: false
        x-dataType: "Int"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
        x-nullable: false
        x-dataType: "(Map.Map String Text)"
      Containers:
        type: "integer"
        x-nullable: false
        x-dataType: "Int"
  AuthConfig:
    type: "object"
    properties:
      username:
        type: "string"
        x-dataType: "Text"
      password:
        type: "string"
        x-dataType: "Text"
      email:
        type: "string"
        x-dataType: "Text"
      serveraddress:
        type: "string"
        x-dataType: "Text"
    example:
      username: "hannibal"
      password: "xxxx"
      serveraddress: "https://index.docker.io/v1/"
    x-mimeTypes:
    - "MimeJSON"
  ProcessConfig:
    type: "object"
    properties:
      privileged:
        type: "boolean"
        x-dataType: "Bool"
      user:
        type: "string"
        x-dataType: "Text"
      tty:
        type: "boolean"
        x-dataType: "Bool"
      entrypoint:
        type: "string"
        x-dataType: "Text"
      arguments:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
  Volume:
    type: "object"
    required:
    - "Driver"
    - "Labels"
    - "Mountpoint"
    - "Name"
    - "Options"
    - "Scope"
    properties:
      Name:
        type: "string"
        description: "Name of the volume."
        x-nullable: false
        x-dataType: "Text"
      Driver:
        type: "string"
        description: "Name of the volume driver used by the volume."
        x-nullable: false
        x-dataType: "Text"
      Mountpoint:
        type: "string"
        description: "Mount path of the volume on the host."
        x-nullable: false
        x-dataType: "Text"
      Status:
        type: "object"
        description: "Low-level details about the volume, provided by the volume driver.\n\
          Details are returned as a map with key/value pairs:\n`{\"key\":\"value\"\
          ,\"key2\":\"value2\"}`.\n\nThe `Status` field is optional, and is omitted\
          \ if the volume driver\ndoes not support this feature.\n"
        additionalProperties:
          type: "object"
          properties: {}
        x-dataType: "(Map.Map String A.Value)"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-nullable: false
        x-dataType: "(Map.Map String Text)"
      Scope:
        type: "string"
        description: "The level at which the volume exists. Either `global` for cluster-wide,\
          \ or `local` for machine level."
        default: "local"
        enum:
        - "local"
        - "global"
        x-nullable: false
        x-dataType: "E'Scope"
      Options:
        type: "object"
        description: "The driver specific options used when creating the volume."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      UsageData:
        $ref: "#/definitions/Volume_UsageData"
        x-dataType: "VolumeUsageData"
    example:
      Name: "tardis"
      Driver: "custom"
      Mountpoint: "/var/lib/docker/volumes/tardis"
      Status:
        hello: "world"
      Labels:
        com.example.some-label: "some-value"
        com.example.some-other-label: "some-other-value"
      Scope: "local"
  Network:
    type: "object"
    properties:
      Name:
        type: "string"
        x-dataType: "Text"
      Id:
        type: "string"
        x-dataType: "Text"
      Created:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      Scope:
        type: "string"
        x-dataType: "Text"
      Driver:
        type: "string"
        x-dataType: "Text"
      EnableIPv6:
        type: "boolean"
        x-dataType: "Bool"
      IPAM:
        $ref: "#/definitions/IPAM"
        x-dataType: "IPAM"
      Internal:
        type: "boolean"
        x-dataType: "Bool"
      Containers:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/NetworkContainer"
        x-dataType: "(Map.Map String NetworkContainer)"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
    example:
      Name: "net01"
      Id: "7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99"
      Created: "2016-10-19T04:33:30.360899459Z"
      Scope: "local"
      Driver: "bridge"
      EnableIPv6: false
      IPAM:
        Driver: "default"
        Config:
        - Subnet: "172.19.0.0/16"
          Gateway: "172.19.0.1"
        Options:
          foo: "bar"
      Internal: false
      Containers:
        19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c:
          Name: "test"
          EndpointID: "628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a"
          MacAddress: "02:42:ac:13:00:02"
          IPv4Address: "172.19.0.2/16"
          IPv6Address: ""
      Options:
        com.docker.network.bridge.default_bridge: "true"
        com.docker.network.bridge.enable_icc: "true"
        com.docker.network.bridge.enable_ip_masquerade: "true"
        com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
        com.docker.network.bridge.name: "docker0"
        com.docker.network.driver.mtu: "1500"
      Labels:
        com.example.some-label: "some-value"
        com.example.some-other-label: "some-other-value"
  IPAM:
    type: "object"
    properties:
      Driver:
        type: "string"
        description: "Name of the IPAM driver to use."
        default: "default"
        x-dataType: "Text"
      Config:
        type: "array"
        description: "List of IPAM configuration options, specified as a map: `{\"\
          Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\"\
          : <device_name:IP address>}`"
        items:
          type: "object"
          additionalProperties:
            type: "string"
        x-dataType: "[(Map.Map String Text)]"
      Options:
        type: "array"
        description: "Driver-specific options, specified as a map."
        items:
          type: "object"
          additionalProperties:
            type: "string"
        x-dataType: "[(Map.Map String Text)]"
  NetworkContainer:
    type: "object"
    properties:
      EndpointID:
        type: "string"
        x-dataType: "Text"
      MacAddress:
        type: "string"
        x-dataType: "Text"
      IPv4Address:
        type: "string"
        x-dataType: "Text"
      IPv6Address:
        type: "string"
        x-dataType: "Text"
  BuildInfo:
    type: "object"
    properties:
      id:
        type: "string"
        x-dataType: "Text"
      stream:
        type: "string"
        x-dataType: "Text"
      error:
        type: "string"
        x-dataType: "Text"
      errorDetail:
        $ref: "#/definitions/ErrorDetail"
        x-dataType: "ErrorDetail"
      status:
        type: "string"
        x-dataType: "Text"
      progress:
        type: "string"
        x-dataType: "Text"
      progressDetail:
        $ref: "#/definitions/ProgressDetail"
        x-dataType: "ProgressDetail"
  CreateImageInfo:
    type: "object"
    properties:
      error:
        type: "string"
        x-dataType: "Text"
      status:
        type: "string"
        x-dataType: "Text"
      progress:
        type: "string"
        x-dataType: "Text"
      progressDetail:
        $ref: "#/definitions/ProgressDetail"
        x-dataType: "ProgressDetail"
  PushImageInfo:
    type: "object"
    properties:
      error:
        type: "string"
        x-dataType: "Text"
      status:
        type: "string"
        x-dataType: "Text"
      progress:
        type: "string"
        x-dataType: "Text"
      progressDetail:
        $ref: "#/definitions/ProgressDetail"
        x-dataType: "ProgressDetail"
  ErrorDetail:
    type: "object"
    properties:
      code:
        type: "integer"
        x-dataType: "Int"
      message:
        type: "string"
        x-dataType: "Text"
  ProgressDetail:
    type: "object"
    properties:
      code:
        type: "integer"
        x-dataType: "Int"
      message:
        type: "integer"
        x-dataType: "Int"
  ErrorResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        description: "The error message."
        x-nullable: false
        x-dataType: "Text"
    description: "Represents an error."
    example:
      message: "Something went wrong."
  IdResponse:
    type: "object"
    required:
    - "Id"
    properties:
      Id:
        type: "string"
        description: "The id of the newly created object."
        x-nullable: false
        x-dataType: "Text"
    description: "Response to an API call that returns just an Id"
    example:
      Id: "Id"
  EndpointSettings:
    type: "object"
    properties:
      IPAMConfig:
        $ref: "#/definitions/EndpointSettings_IPAMConfig"
        x-dataType: "EndpointSettingsIPAMConfig"
      Links:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Aliases:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      NetworkID:
        type: "string"
        x-dataType: "Text"
      EndpointID:
        type: "string"
        x-dataType: "Text"
      Gateway:
        type: "string"
        x-dataType: "Text"
      IPAddress:
        type: "string"
        x-dataType: "Text"
      IPPrefixLen:
        type: "integer"
        x-dataType: "Int"
      IPv6Gateway:
        type: "string"
        x-dataType: "Text"
      GlobalIPv6Address:
        type: "string"
        x-dataType: "Text"
      GlobalIPv6PrefixLen:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
      MacAddress:
        type: "string"
        x-dataType: "Text"
    description: "Configuration for a network endpoint."
  PluginMount:
    type: "object"
    required:
    - "Description"
    - "Destination"
    - "Name"
    - "Options"
    - "Settable"
    - "Source"
    - "Type"
    properties:
      Name:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Description:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Settable:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Source:
        type: "string"
        x-dataType: "Text"
      Destination:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Type:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Options:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
    x-nullable: false
  PluginDevice:
    type: "object"
    required:
    - "Description"
    - "Name"
    - "Path"
    - "Settable"
    properties:
      Name:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Description:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Settable:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Path:
        type: "string"
        x-dataType: "Text"
    x-nullable: false
  PluginEnv:
    type: "object"
    required:
    - "Description"
    - "Name"
    - "Settable"
    - "Value"
    properties:
      Name:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Description:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Settable:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Value:
        type: "string"
        x-dataType: "Text"
    x-nullable: false
  PluginInterfaceType:
    type: "object"
    required:
    - "Capability"
    - "Prefix"
    - "Version"
    properties:
      Prefix:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Capability:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Version:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
    x-nullable: false
  Plugin:
    type: "object"
    required:
    - "Config"
    - "Enabled"
    - "Name"
    - "Settings"
    properties:
      Id:
        type: "string"
        x-dataType: "Text"
      Name:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Enabled:
        type: "boolean"
        description: "True when the plugin is running. False when the plugin is not\
          \ running, only installed."
        x-nullable: false
        x-dataType: "Bool"
      Settings:
        $ref: "#/definitions/Plugin_Settings"
        x-dataType: "PluginSettings"
      Config:
        $ref: "#/definitions/Plugin_Config"
        x-dataType: "PluginConfig"
    description: "A plugin for the Engine API"
    example:
      Id: "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
      Name: "tiborvass/sample-volume-plugin"
      Tag: "latest"
      Active: true
      Settings:
        Env:
        - "DEBUG=0"
        Args: null
        Devices: null
      Config:
        Description: "A sample volume plugin for Docker"
        Documentation: "https://docs.docker.com/engine/extend/plugins/"
        Interface:
          Types:
          - "docker.volumedriver/1.0"
          Socket: "plugins.sock"
        Entrypoint:
        - "/usr/bin/sample-volume-plugin"
        - "/data"
        WorkDir: ""
        User: {}
        Network:
          Type: ""
        Linux:
          Capabilities: null
          AllowAllDevices: false
          Devices: null
        Mounts: null
        PropagatedMount: "/data"
        Env:
        - Name: "DEBUG"
          Description: "If set, prints debug messages"
          Settable: null
          Value: "0"
        Args:
          Name: "args"
          Description: "command line arguments"
          Settable: null
          Value: []
  NodeSpec:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Name for the node."
        x-dataType: "Text"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      Role:
        type: "string"
        description: "Role of the node."
        enum:
        - "worker"
        - "manager"
        x-dataType: "E'Role"
      Availability:
        type: "string"
        description: "Availability of the node."
        enum:
        - "active"
        - "pause"
        - "drain"
        x-dataType: "E'Availability"
    example:
      Availability: "active"
      Name: "node-name"
      Role: "manager"
      Labels:
        foo: "bar"
    x-mimeTypes:
    - "MimePlainText"
    - "MimeJSON"
  Node:
    type: "object"
    properties:
      ID:
        type: "string"
        x-dataType: "Text"
      Version:
        $ref: "#/definitions/Node_Version"
        x-dataType: "NodeVersion"
      CreatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      UpdatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      Spec:
        $ref: "#/definitions/NodeSpec"
        x-dataType: "NodeSpec"
      Description:
        $ref: "#/definitions/Node_Description"
        x-dataType: "NodeDescription"
    example:
      ID: "24ifsmvkjbyhk"
      Version:
        Index: 8
      CreatedAt: "2016-06-07T20:31:11.853781916Z"
      UpdatedAt: "2016-06-07T20:31:11.999868824Z"
      Spec:
        Name: "my-node"
        Role: "manager"
        Availability: "active"
        Labels:
          foo: "bar"
      Description:
        Hostname: "bf3067039e47"
        Platform:
          Architecture: "x86_64"
          OS: "linux"
        Resources:
          NanoCPUs: 4000000000
          MemoryBytes: 8272408576
        Engine:
          EngineVersion: "1.13.0"
          Labels:
            foo: "bar"
          Plugins:
          - Type: "Volume"
            Name: "local"
          - Type: "Network"
            Name: "bridge"
          - Type: "Network"
            Name: "null"
          - Type: "Network"
            Name: "overlay"
      Status:
        State: "ready"
        Addr: "172.17.0.2"
      ManagerStatus:
        Leader: true
        Reachability: "reachable"
        Addr: "172.17.0.2:2377"
  SwarmSpec:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "Name of the swarm."
        x-dataType: "Text"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      Orchestration:
        $ref: "#/definitions/SwarmSpec_Orchestration"
        x-dataType: "SwarmSpecOrchestration"
      Raft:
        $ref: "#/definitions/SwarmSpec_Raft"
        x-dataType: "SwarmSpecRaft"
      Dispatcher:
        $ref: "#/definitions/SwarmSpec_Dispatcher"
        x-dataType: "SwarmSpecDispatcher"
      CAConfig:
        $ref: "#/definitions/SwarmSpec_CAConfig"
        x-dataType: "SwarmSpecCAConfig"
      EncryptionConfig:
        $ref: "#/definitions/SwarmSpec_EncryptionConfig"
        x-dataType: "SwarmSpecEncryptionConfig"
      TaskDefaults:
        $ref: "#/definitions/SwarmSpec_TaskDefaults"
        x-dataType: "SwarmSpecTaskDefaults"
    description: "User modifiable swarm configuration."
    example:
      Name: "default"
      Orchestration:
        TaskHistoryRetentionLimit: 10
      Raft:
        SnapshotInterval: 10000
        LogEntriesForSlowFollowers: 500
        HeartbeatTick: 1
        ElectionTick: 3
      Dispatcher:
        HeartbeatPeriod: 5000000000
      CAConfig:
        NodeCertExpiry: 7776000000000000
      JoinTokens:
        Worker: "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx"
        Manager: "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2"
      EncryptionConfig:
        AutoLockManagers: false
    x-mimeTypes:
    - "MimePlainText"
    - "MimeJSON"
  ClusterInfo:
    type: "object"
    properties:
      ID:
        type: "string"
        description: "The ID of the swarm."
        x-dataType: "Text"
      Version:
        $ref: "#/definitions/Node_Version"
        x-dataType: "NodeVersion"
      CreatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      UpdatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      Spec:
        $ref: "#/definitions/SwarmSpec"
        x-dataType: "SwarmSpec"
  TaskSpec:
    type: "object"
    properties:
      ContainerSpec:
        $ref: "#/definitions/TaskSpec_ContainerSpec"
        x-dataType: "TaskSpecContainerSpec"
      Resources:
        $ref: "#/definitions/TaskSpec_Resources"
        x-dataType: "TaskSpecResources"
      RestartPolicy:
        $ref: "#/definitions/TaskSpec_RestartPolicy"
        x-dataType: "TaskSpecRestartPolicy"
      Placement:
        $ref: "#/definitions/TaskSpec_Placement"
        x-dataType: "TaskSpecPlacement"
      ForceUpdate:
        type: "integer"
        description: "A counter that triggers an update even if no relevant parameters\
          \ have been changed."
        x-dataType: "Int"
      Networks:
        type: "array"
        items:
          $ref: "#/definitions/TaskSpec_Networks"
        x-dataType: "[TaskSpecNetworks]"
      LogDriver:
        $ref: "#/definitions/TaskSpec_LogDriver"
        x-dataType: "TaskSpecLogDriver"
    description: "User modifiable task configuration."
    example:
      Networks:
      - Target: "Target"
        Aliases:
        - "Aliases"
        - "Aliases"
      - Target: "Target"
        Aliases:
        - "Aliases"
        - "Aliases"
      Placement:
        Constraints:
        - "Constraints"
        - "Constraints"
      ContainerSpec:
        Args:
        - "Args"
        - "Args"
        Mounts:
        - ReadOnly: true
          BindOptions: "{}"
          Target: "Target"
          Type: "bind"
          VolumeOptions:
            NoCopy: false
            DriverConfig:
              Options:
                key: "Options"
              Name: "Name"
            Labels:
              key: "Labels"
          TmpfsOptions:
            Mode: 1
            SizeBytes: 6
        - ReadOnly: true
          BindOptions: "{}"
          Target: "Target"
          Type: "bind"
          VolumeOptions:
            NoCopy: false
            DriverConfig:
              Options:
                key: "Options"
              Name: "Name"
            Labels:
              key: "Labels"
          TmpfsOptions:
            Mode: 1
            SizeBytes: 6
        User: "User"
        Command:
        - "Command"
        - "Command"
        TTY: true
        DNSConfig:
          Options:
          - "Options"
          - "Options"
          Nameservers:
          - "Nameservers"
          - "Nameservers"
          Search:
          - "Search"
          - "Search"
        Labels:
          key: "Labels"
        StopGracePeriod: 5
        Image: "Image"
        Env:
        - "Env"
        - "Env"
        Dir: "Dir"
      RestartPolicy:
        Condition: "none"
        Window: 4
        Delay: 3
        MaxAttempts: 2
      LogDriver:
        Options:
          key: "Options"
        Name: "Name"
      Resources:
        Reservation:
          NanoCPUs: 7
          MemoryBytes: 9
        Limits:
          NanoCPUs: 5
          MemoryBytes: 2
      ForceUpdate: 7
  TaskState:
    type: "string"
    enum:
    - "new"
    - "allocated"
    - "pending"
    - "assigned"
    - "accepted"
    - "preparing"
    - "ready"
    - "starting"
    - "running"
    - "complete"
    - "shutdown"
    - "failed"
    - "rejected"
  Task:
    type: "object"
    properties:
      ID:
        type: "string"
        description: "The ID of the task."
        x-dataType: "Text"
      Version:
        $ref: "#/definitions/Node_Version"
        x-dataType: "NodeVersion"
      CreatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      UpdatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      Name:
        type: "string"
        description: "Name of the task."
        x-dataType: "Text"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      Spec:
        $ref: "#/definitions/TaskSpec"
        x-dataType: "TaskSpec"
      ServiceID:
        type: "string"
        description: "The ID of the service this task is part of."
        x-dataType: "Text"
      Slot:
        type: "integer"
        x-dataType: "Int"
      NodeID:
        type: "string"
        description: "The ID of the node that this task is on."
        x-dataType: "Text"
      Status:
        $ref: "#/definitions/Task_Status"
        x-dataType: "TaskStatus"
      DesiredState:
        $ref: "#/definitions/TaskState"
        x-dataType: "TaskState"
    example:
      ID: "0kzzo1i0y4jz6027t0k7aezc7"
      Version:
        Index: 71
      CreatedAt: "2016-06-07T21:07:31.171892745Z"
      UpdatedAt: "2016-06-07T21:07:31.376370513Z"
      Spec:
        ContainerSpec:
          Image: "redis"
        Resources:
          Limits: {}
          Reservations: {}
        RestartPolicy:
          Condition: "any"
          MaxAttempts: 0
        Placement: {}
      ServiceID: "9mnpnzenvg8p8tdbtq4wvbkcz"
      Slot: 1
      NodeID: "60gvrl6tm78dmak4yl7srz94v"
      Status:
        Timestamp: "2016-06-07T21:07:31.290032978Z"
        State: "running"
        Message: "started"
        ContainerStatus:
          ContainerID: "e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035"
          PID: 677
      DesiredState: "running"
      NetworksAttachments:
      - Network:
          ID: "4qvuz4ko70xaltuqbt8956gd1"
          Version:
            Index: 18
          CreatedAt: "2016-06-07T20:31:11.912919752Z"
          UpdatedAt: "2016-06-07T21:07:29.955277358Z"
          Spec:
            Name: "ingress"
            Labels:
              com.docker.swarm.internal: "true"
            DriverConfiguration: {}
            IPAMOptions:
              Driver: {}
              Configs:
              - Subnet: "10.255.0.0/16"
                Gateway: "10.255.0.1"
          DriverState:
            Name: "overlay"
            Options:
              com.docker.network.driver.overlay.vxlanid_list: "256"
          IPAMOptions:
            Driver:
              Name: "default"
            Configs:
            - Subnet: "10.255.0.0/16"
              Gateway: "10.255.0.1"
        Addresses:
        - "10.255.0.10/16"
  ServiceSpec:
    properties:
      Name:
        type: "string"
        description: "Name of the service."
        x-dataType: "Text"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      TaskTemplate:
        $ref: "#/definitions/TaskSpec"
        x-dataType: "TaskSpec"
      Mode:
        $ref: "#/definitions/ServiceSpec_Mode"
        x-dataType: "ServiceSpecMode"
      UpdateConfig:
        $ref: "#/definitions/ServiceSpec_UpdateConfig"
        x-dataType: "ServiceSpecUpdateConfig"
      Networks:
        type: "array"
        description: "Array of network names or IDs to attach the service to."
        items:
          $ref: "#/definitions/TaskSpec_Networks"
        x-dataType: "[TaskSpecNetworks]"
      EndpointSpec:
        $ref: "#/definitions/EndpointSpec"
        x-dataType: "EndpointSpec"
    description: "User modifiable configuration for a service."
    example:
      TaskTemplate:
        Networks:
        - Target: "Target"
          Aliases:
          - "Aliases"
          - "Aliases"
        - Target: "Target"
          Aliases:
          - "Aliases"
          - "Aliases"
        Placement:
          Constraints:
          - "Constraints"
          - "Constraints"
        ContainerSpec:
          Args:
          - "Args"
          - "Args"
          Mounts:
          - ReadOnly: true
            BindOptions: "{}"
            Target: "Target"
            Type: "bind"
            VolumeOptions:
              NoCopy: false
              DriverConfig:
                Options:
                  key: "Options"
                Name: "Name"
              Labels:
                key: "Labels"
            TmpfsOptions:
              Mode: 1
              SizeBytes: 6
          - ReadOnly: true
            BindOptions: "{}"
            Target: "Target"
            Type: "bind"
            VolumeOptions:
              NoCopy: false
              DriverConfig:
                Options:
                  key: "Options"
                Name: "Name"
              Labels:
                key: "Labels"
            TmpfsOptions:
              Mode: 1
              SizeBytes: 6
          User: "User"
          Command:
          - "Command"
          - "Command"
          TTY: true
          DNSConfig:
            Options:
            - "Options"
            - "Options"
            Nameservers:
            - "Nameservers"
            - "Nameservers"
            Search:
            - "Search"
            - "Search"
          Labels:
            key: "Labels"
          StopGracePeriod: 5
          Image: "Image"
          Env:
          - "Env"
          - "Env"
          Dir: "Dir"
        RestartPolicy:
          Condition: "none"
          Window: 4
          Delay: 3
          MaxAttempts: 2
        LogDriver:
          Options:
            key: "Options"
          Name: "Name"
        Resources:
          Reservation:
            NanoCPUs: 7
            MemoryBytes: 9
          Limits:
            NanoCPUs: 5
            MemoryBytes: 2
        ForceUpdate: 7
      UpdateConfig:
        FailureAction: "continue"
        MaxFailureRatio: 7.4577447736837658709418974467553198337554931640625
        Monitor: 6
        Parallelism: 1
        Delay: 1
      Networks:
      - Target: "Target"
        Aliases:
        - "Aliases"
        - "Aliases"
      - Target: "Target"
        Aliases:
        - "Aliases"
        - "Aliases"
      Mode:
        Replicated:
          Replicas: 1
        Global: "{}"
      EndpointSpec:
        Mode: "vip"
        Ports:
        - TargetPort: 1
          PublishedPort: 4
          Protocol: "tcp"
          Name: "Name"
        - TargetPort: 1
          PublishedPort: 4
          Protocol: "tcp"
          Name: "Name"
      Labels:
        key: "Labels"
      Name: "Name"
  EndpointPortConfig:
    type: "object"
    properties:
      Name:
        type: "string"
        x-dataType: "Text"
      Protocol:
        type: "string"
        enum:
        - "tcp"
        - "udp"
        x-dataType: "E'Type"
      TargetPort:
        type: "integer"
        description: "The port inside the container."
        x-dataType: "Int"
      PublishedPort:
        type: "integer"
        description: "The port on the swarm hosts."
        x-dataType: "Int"
    example:
      TargetPort: 1
      PublishedPort: 4
      Protocol: "tcp"
      Name: "Name"
  EndpointSpec:
    type: "object"
    properties:
      Mode:
        type: "string"
        description: "The mode of resolution to use for internal load balancing between\
          \ tasks."
        default: "vip"
        enum:
        - "vip"
        - "dnsrr"
        x-dataType: "E'Mode"
      Ports:
        type: "array"
        description: "List of exposed ports that this service is accessible on from\
          \ the outside. Ports can only be provided if `vip` resolution mode is used."
        items:
          $ref: "#/definitions/EndpointPortConfig"
        x-dataType: "[EndpointPortConfig]"
    description: "Properties that can be configured to access and load balance a service."
    example:
      Mode: "vip"
      Ports:
      - TargetPort: 1
        PublishedPort: 4
        Protocol: "tcp"
        Name: "Name"
      - TargetPort: 1
        PublishedPort: 4
        Protocol: "tcp"
        Name: "Name"
  Service:
    type: "object"
    properties:
      ID:
        type: "string"
        x-dataType: "Text"
      Version:
        $ref: "#/definitions/Node_Version"
        x-dataType: "NodeVersion"
      CreatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      UpdatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      Spec:
        $ref: "#/definitions/ServiceSpec"
        x-dataType: "ServiceSpec"
      Endpoint:
        $ref: "#/definitions/Service_Endpoint"
        x-dataType: "ServiceEndpoint"
      UpdateStatus:
        $ref: "#/definitions/Service_UpdateStatus"
        x-dataType: "ServiceUpdateStatus"
    example:
      ID: "9mnpnzenvg8p8tdbtq4wvbkcz"
      Version:
        Index: 19
      CreatedAt: "2016-06-07T21:05:51.880065305Z"
      UpdatedAt: "2016-06-07T21:07:29.962229872Z"
      Spec:
        Name: "hopeful_cori"
        TaskTemplate:
          ContainerSpec:
            Image: "redis"
          Resources:
            Limits: {}
            Reservations: {}
          RestartPolicy:
            Condition: "any"
            MaxAttempts: 0
          Placement: {}
          ForceUpdate: 0
        Mode:
          Replicated:
            Replicas: 1
        UpdateConfig:
          Parallelism: 1
          FailureAction: "pause"
          Monitor: 15000000000
          MaxFailureRatio: 0.15
        EndpointSpec:
          Mode: "vip"
          Ports:
          - Protocol: "tcp"
            TargetPort: 6379
            PublishedPort: 30001
      Endpoint:
        Spec:
          Mode: "vip"
          Ports:
          - Protocol: "tcp"
            TargetPort: 6379
            PublishedPort: 30001
        Ports:
        - Protocol: "tcp"
          TargetPort: 6379
          PublishedPort: 30001
        VirtualIPs:
        - NetworkID: "4qvuz4ko70xaltuqbt8956gd1"
          Addr: "10.255.0.2/16"
        - NetworkID: "4qvuz4ko70xaltuqbt8956gd1"
          Addr: "10.255.0.3/16"
  ImageDeleteResponse:
    type: "object"
    properties:
      Untagged:
        type: "string"
        description: "The image ID of an image that was untagged"
        x-dataType: "Text"
      Deleted:
        type: "string"
        description: "The image ID of an image that was deleted"
        x-dataType: "Text"
    example:
      Deleted: "Deleted"
      Untagged: "Untagged"
  ServiceUpdateResponse:
    type: "object"
    properties:
      Warnings:
        type: "array"
        description: "Optional warning messages"
        items:
          type: "string"
        x-dataType: "[Text]"
    example:
      Warning: "unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest\
        \ not found"
  ContainerSummary:
    type: "array"
    items:
      $ref: "#/definitions/ContainerSummary_inner"
  SecretSpec:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "User-defined name of the secret."
        x-dataType: "Text"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      Data:
        type: "array"
        description: "Base64-url-safe-encoded secret data"
        items:
          type: "string"
        x-dataType: "[Text]"
  Secret:
    type: "object"
    properties:
      ID:
        type: "string"
        x-dataType: "Text"
      Version:
        $ref: "#/definitions/Node_Version"
        x-dataType: "NodeVersion"
      CreatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      UpdatedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      Spec:
        $ref: "#/definitions/ServiceSpec"
        x-dataType: "ServiceSpec"
    example:
      Version:
        Index: 0
      CreatedAt: "CreatedAt"
      ID: "ID"
      Spec:
        TaskTemplate:
          Networks:
          - Target: "Target"
            Aliases:
            - "Aliases"
            - "Aliases"
          - Target: "Target"
            Aliases:
            - "Aliases"
            - "Aliases"
          Placement:
            Constraints:
            - "Constraints"
            - "Constraints"
          ContainerSpec:
            Args:
            - "Args"
            - "Args"
            Mounts:
            - ReadOnly: true
              BindOptions: "{}"
              Target: "Target"
              Type: "bind"
              VolumeOptions:
                NoCopy: false
                DriverConfig:
                  Options:
                    key: "Options"
                  Name: "Name"
                Labels:
                  key: "Labels"
              TmpfsOptions:
                Mode: 1
                SizeBytes: 6
            - ReadOnly: true
              BindOptions: "{}"
              Target: "Target"
              Type: "bind"
              VolumeOptions:
                NoCopy: false
                DriverConfig:
                  Options:
                    key: "Options"
                  Name: "Name"
                Labels:
                  key: "Labels"
              TmpfsOptions:
                Mode: 1
                SizeBytes: 6
            User: "User"
            Command:
            - "Command"
            - "Command"
            TTY: true
            DNSConfig:
              Options:
              - "Options"
              - "Options"
              Nameservers:
              - "Nameservers"
              - "Nameservers"
              Search:
              - "Search"
              - "Search"
            Labels:
              key: "Labels"
            StopGracePeriod: 5
            Image: "Image"
            Env:
            - "Env"
            - "Env"
            Dir: "Dir"
          RestartPolicy:
            Condition: "none"
            Window: 4
            Delay: 3
            MaxAttempts: 2
          LogDriver:
            Options:
              key: "Options"
            Name: "Name"
          Resources:
            Reservation:
              NanoCPUs: 7
              MemoryBytes: 9
            Limits:
              NanoCPUs: 5
              MemoryBytes: 2
          ForceUpdate: 7
        UpdateConfig:
          FailureAction: "continue"
          MaxFailureRatio: 7.4577447736837658709418974467553198337554931640625
          Monitor: 6
          Parallelism: 1
          Delay: 1
        Networks:
        - Target: "Target"
          Aliases:
          - "Aliases"
          - "Aliases"
        - Target: "Target"
          Aliases:
          - "Aliases"
          - "Aliases"
        Mode:
          Replicated:
            Replicas: 1
          Global: "{}"
        EndpointSpec:
          Mode: "vip"
          Ports:
          - TargetPort: 1
            PublishedPort: 4
            Protocol: "tcp"
            Name: "Name"
          - TargetPort: 1
            PublishedPort: 4
            Protocol: "tcp"
            Name: "Name"
        Labels:
          key: "Labels"
        Name: "Name"
      UpdatedAt: "UpdatedAt"
  inline_response_201:
    required:
    - "Id"
    - "Warnings"
    properties:
      Id:
        type: "string"
        description: "The ID of the created container"
        x-nullable: false
        x-dataType: "Text"
      Warnings:
        type: "array"
        description: "Warnings encountered when creating the container"
        items:
          type: "string"
        x-nullable: false
        x-dataType: "[Text]"
  inline_response_200_State:
    properties:
      Status:
        type: "string"
        description: "The status of the container. For example, `running` or `exited`."
        x-dataType: "Text"
      Running:
        type: "boolean"
        description: "Whether this container is running."
        x-dataType: "Bool"
      Paused:
        type: "boolean"
        description: "Whether this container is paused."
        x-dataType: "Bool"
      Restarting:
        type: "boolean"
        description: "Whether this container is restarting."
        x-dataType: "Bool"
      OOMKilled:
        type: "boolean"
        description: "Whether this container has been killed because it ran out of\
          \ memory."
        x-dataType: "Bool"
      Dead:
        type: "boolean"
        x-dataType: "Bool"
      Pid:
        type: "integer"
        description: "The process ID of this container"
        x-dataType: "Int"
      ExitCode:
        type: "integer"
        description: "The last exit code of this container"
        x-dataType: "Int"
      Error:
        type: "string"
        x-dataType: "Text"
      StartedAt:
        type: "string"
        description: "The time when this container was last started."
        x-dataType: "Text"
      FinishedAt:
        type: "string"
        description: "The time when this container last exited."
        x-dataType: "Text"
    description: "The state of the container."
  inline_response_200:
    properties:
      Id:
        type: "string"
        description: "The ID of the container"
        x-dataType: "Text"
      Created:
        type: "string"
        description: "The time the container was created"
        x-dataType: "Text"
      Path:
        type: "string"
        description: "The path to the command being run"
        x-dataType: "Text"
      Args:
        type: "array"
        description: "The arguments to the command being run"
        items:
          type: "string"
        x-dataType: "[Text]"
      State:
        $ref: "#/definitions/inline_response_200_State"
        x-dataType: "InlineResponse200State"
      Image:
        type: "string"
        description: "The container's image"
        x-dataType: "Text"
      ResolvConfPath:
        type: "string"
        x-dataType: "Text"
      HostnamePath:
        type: "string"
        x-dataType: "Text"
      HostsPath:
        type: "string"
        x-dataType: "Text"
      LogPath:
        type: "string"
        x-dataType: "Text"
      Node:
        type: "object"
        description: "TODO"
        properties: {}
        x-dataType: "A.Value"
      Name:
        type: "string"
        x-dataType: "Text"
      RestartCount:
        type: "integer"
        x-dataType: "Int"
      Driver:
        type: "string"
        x-dataType: "Text"
      MountLabel:
        type: "string"
        x-dataType: "Text"
      ProcessLabel:
        type: "string"
        x-dataType: "Text"
      AppArmorProfile:
        type: "string"
        x-dataType: "Text"
      ExecIDs:
        type: "string"
        x-dataType: "Text"
      HostConfig:
        $ref: "#/definitions/HostConfig"
        x-dataType: "HostConfig"
      GraphDriver:
        $ref: "#/definitions/GraphDriver"
        x-dataType: "GraphDriver"
      SizeRw:
        type: "integer"
        format: "int64"
        description: "The size of files that have been created or changed by this\
          \ container."
        x-dataType: "Integer"
      SizeRootFs:
        type: "integer"
        format: "int64"
        description: "The total size of all the files in this container."
        x-dataType: "Integer"
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/MountPoint"
        x-dataType: "[MountPoint]"
      Config:
        $ref: "#/definitions/Config"
        x-dataType: "Config"
      NetworkSettings:
        $ref: "#/definitions/NetworkConfig"
        x-dataType: "NetworkConfig"
  inline_response_200_1:
    properties:
      Titles:
        type: "array"
        description: "The ps column titles"
        items:
          type: "string"
        x-dataType: "[Text]"
      Processes:
        type: "array"
        description: "Each process running in the container, where each is process\
          \ is an array of values corresponding to the titles"
        items:
          type: "array"
          items:
            type: "string"
        x-dataType: "[[Text]]"
  inline_response_200_2:
    properties:
      Path:
        type: "string"
        description: "Path to file that has changed"
        x-dataType: "Text"
      Kind:
        type: "integer"
        description: "Kind of change"
        x-dataType: "Int"
  inline_response_200_3:
    properties:
      Warnings:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
    example:
      Warnings:
      - "Warnings"
      - "Warnings"
  inline_response_200_4:
    required:
    - "StatusCode"
    properties:
      StatusCode:
        type: "integer"
        description: "Exit code of the container"
        x-nullable: false
        x-dataType: "Int"
    example:
      StatusCode: 0
  inline_response_200_5:
    properties:
      ContainersDeleted:
        type: "array"
        description: "Container IDs that were deleted"
        items:
          type: "string"
        x-dataType: "[Text]"
      SpaceReclaimed:
        type: "integer"
        format: "int64"
        description: "Disk space reclaimed in bytes"
        x-dataType: "Integer"
    example:
      SpaceReclaimed: 0
      ContainersDeleted:
      - "ContainersDeleted"
      - "ContainersDeleted"
  inline_response_200_6:
    properties:
      Id:
        type: "string"
        x-dataType: "Text"
      Created:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
      CreatedBy:
        type: "string"
        x-dataType: "Text"
      Tags:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Size:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
      Comment:
        type: "string"
        x-dataType: "Text"
  inline_response_200_7:
    properties:
      description:
        type: "string"
        x-dataType: "Text"
      is_official:
        type: "boolean"
        x-dataType: "Bool"
      is_automated:
        type: "boolean"
        x-dataType: "Bool"
      name:
        type: "string"
        x-dataType: "Text"
      star_count:
        type: "integer"
        x-dataType: "Int"
  inline_response_200_8:
    properties:
      ImagesDeleted:
        type: "array"
        description: "Images that were deleted"
        items:
          $ref: "#/definitions/ImageDeleteResponse"
        x-dataType: "[ImageDeleteResponse]"
      SpaceReclaimed:
        type: "integer"
        format: "int64"
        description: "Disk space reclaimed in bytes"
        x-dataType: "Integer"
    example:
      SpaceReclaimed: 0
      ImagesDeleted:
      - Deleted: "Deleted"
        Untagged: "Untagged"
      - Deleted: "Deleted"
        Untagged: "Untagged"
  inline_response_200_9:
    required:
    - "Status"
    properties:
      Status:
        type: "string"
        description: "The status of the authentication"
        x-nullable: false
        x-dataType: "Text"
      IdentityToken:
        type: "string"
        description: "An opaque token used to authenticate a user after a successful\
          \ login"
        x-nullable: false
        x-dataType: "Text"
  inline_response_200_10_Plugins:
    properties:
      Volume:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Network:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
  inline_response_200_10_RegistryConfig_IndexConfigs:
    properties:
      Mirrors:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Name:
        type: "string"
        x-dataType: "Text"
      Official:
        type: "boolean"
        x-dataType: "Bool"
      Secure:
        type: "boolean"
        x-dataType: "Bool"
  inline_response_200_10_RegistryConfig:
    properties:
      IndexConfigs:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/inline_response_200_10_RegistryConfig_IndexConfigs"
        x-dataType: "(Map.Map String InlineResponse20010RegistryConfigIndexConfigs)"
      InsecureRegistryCIDRs:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
  inline_response_200_10:
    properties:
      Architecture:
        type: "string"
        x-dataType: "Text"
      Containers:
        type: "integer"
        x-dataType: "Int"
      ContainersRunning:
        type: "integer"
        x-dataType: "Int"
      ContainersStopped:
        type: "integer"
        x-dataType: "Int"
      ContainersPaused:
        type: "integer"
        x-dataType: "Int"
      CpuCfsPeriod:
        type: "boolean"
        x-dataType: "Bool"
      CpuCfsQuota:
        type: "boolean"
        x-dataType: "Bool"
      Debug:
        type: "boolean"
        x-dataType: "Bool"
      DiscoveryBackend:
        type: "string"
        x-dataType: "Text"
      DockerRootDir:
        type: "string"
        x-dataType: "Text"
      Driver:
        type: "string"
        x-dataType: "Text"
      DriverStatus:
        type: "array"
        items:
          type: "array"
          items:
            type: "string"
        x-dataType: "[[Text]]"
      SystemStatus:
        type: "array"
        items:
          type: "array"
          items:
            type: "string"
        x-dataType: "[[Text]]"
      Plugins:
        $ref: "#/definitions/inline_response_200_10_Plugins"
        x-dataType: "InlineResponse20010Plugins"
      ExperimentalBuild:
        type: "boolean"
        x-dataType: "Bool"
      HttpProxy:
        type: "string"
        x-dataType: "Text"
      HttpsProxy:
        type: "string"
        x-dataType: "Text"
      ID:
        type: "string"
        x-dataType: "Text"
      IPv4Forwarding:
        type: "boolean"
        x-dataType: "Bool"
      Images:
        type: "integer"
        x-dataType: "Int"
      IndexServerAddress:
        type: "string"
        x-dataType: "Text"
      InitPath:
        type: "string"
        x-dataType: "Text"
      InitSha1:
        type: "string"
        x-dataType: "Text"
      KernelVersion:
        type: "string"
        x-dataType: "Text"
      Labels:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      MemTotal:
        type: "integer"
        x-dataType: "Int"
      MemoryLimit:
        type: "boolean"
        x-dataType: "Bool"
      NCPU:
        type: "integer"
        x-dataType: "Int"
      NEventsListener:
        type: "integer"
        x-dataType: "Int"
      NFd:
        type: "integer"
        x-dataType: "Int"
      NGoroutines:
        type: "integer"
        x-dataType: "Int"
      Name:
        type: "string"
        x-dataType: "Text"
      NoProxy:
        type: "string"
        x-dataType: "Text"
      OomKillDisable:
        type: "boolean"
        x-dataType: "Bool"
      OSType:
        type: "string"
        x-dataType: "Text"
      OomScoreAdj:
        type: "integer"
        x-dataType: "Int"
      OperatingSystem:
        type: "string"
        x-dataType: "Text"
      RegistryConfig:
        $ref: "#/definitions/inline_response_200_10_RegistryConfig"
        x-dataType: "InlineResponse20010RegistryConfig"
      SwapLimit:
        type: "boolean"
        x-dataType: "Bool"
      SystemTime:
        type: "string"
        x-dataType: "Text"
      ServerVersion:
        type: "string"
        x-dataType: "Text"
  inline_response_200_11:
    properties:
      Version:
        type: "string"
        x-dataType: "Text"
      ApiVersion:
        type: "string"
        x-dataType: "Text"
      MinAPIVersion:
        type: "string"
        x-dataType: "Text"
      GitCommit:
        type: "string"
        x-dataType: "Text"
      GoVersion:
        type: "string"
        x-dataType: "Text"
      Os:
        type: "string"
        x-dataType: "Text"
      Arch:
        type: "string"
        x-dataType: "Text"
      KernelVersion:
        type: "string"
        x-dataType: "Text"
      Experimental:
        type: "boolean"
        x-dataType: "Bool"
      BuildTime:
        type: "string"
        x-dataType: "Text"
  inline_response_200_12_Actor:
    properties:
      ID:
        type: "string"
        description: "The ID of the object emitting the event"
        x-dataType: "Text"
      Attributes:
        type: "object"
        description: "Various key/value attributes of the object, depending on its\
          \ type"
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
  inline_response_200_12:
    properties:
      Type:
        type: "string"
        description: "The type of object emitting the event"
        x-dataType: "Text"
      Action:
        type: "string"
        description: "The type of event"
        x-dataType: "Text"
      Actor:
        $ref: "#/definitions/inline_response_200_12_Actor"
        x-dataType: "InlineResponse20012Actor"
      time:
        type: "integer"
        description: "Timestamp of event"
        x-dataType: "Int"
      timeNano:
        type: "integer"
        format: "int64"
        description: "Timestamp of event, with nanosecond accuracy"
        x-dataType: "Integer"
  inline_response_200_13:
    properties:
      LayersSize:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
      Images:
        type: "array"
        items:
          $ref: "#/definitions/ImageSummary"
        x-dataType: "[ImageSummary]"
      Containers:
        type: "array"
        items:
          $ref: "#/definitions/ContainerSummary"
        x-dataType: "[ContainerSummary]"
      Volumes:
        type: "array"
        items:
          $ref: "#/definitions/Volume"
        x-dataType: "[Volume]"
    example: "{\"LayersSize\":1092588,\"Images\":[{\"Id\":\"sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\"\
      ,\"ParentId\":\"\",\"RepoTags\":[\"busybox:latest\"],\"RepoDigests\":[\"busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6\"\
      ],\"Created\":1466724217,\"Size\":1092588,\"SharedSize\":0,\"VirtualSize\":1092588,\"\
      Labels\":{},\"Containers\":1}],\"Containers\":[{\"Id\":\"e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148\"\
      ,\"Names\":[\"/top\"],\"Image\":\"busybox\",\"ImageID\":\"sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749\"\
      ,\"Command\":\"top\",\"Created\":1472592424,\"Ports\":[],\"SizeRootFs\":1092588,\"\
      Labels\":{},\"State\":\"exited\",\"Status\":\"Exited (0) 56 minutes ago\",\"\
      HostConfig\":{\"NetworkMode\":\"default\"},\"NetworkSettings\":{\"Networks\"\
      :{\"bridge\":{\"IPAMConfig\":null,\"Links\":null,\"Aliases\":null,\"NetworkID\"\
      :\"d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92\",\"EndpointID\"\
      :\"8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a\",\"Gateway\"\
      :\"172.18.0.1\",\"IPAddress\":\"172.18.0.2\",\"IPPrefixLen\":16,\"IPv6Gateway\"\
      :\"\",\"GlobalIPv6Address\":\"\",\"GlobalIPv6PrefixLen\":0,\"MacAddress\":\"\
      02:42:ac:12:00:02\"}}},\"Mounts\":[]}],\"Volumes\":[{\"Name\":\"my-volume\"\
      ,\"Driver\":\"local\",\"Mountpoint\":\"\",\"Labels\":null,\"Scope\":\"\",\"\
      Options\":null,\"UsageData\":{\"Size\":0,\"RefCount\":0}}]}"
  execConfig:
    type: "object"
    properties:
      AttachStdin:
        type: "boolean"
        description: "Attach to `stdin` of the exec command."
        x-dataType: "Bool"
      AttachStdout:
        type: "boolean"
        description: "Attach to `stdout` of the exec command."
        x-dataType: "Bool"
      AttachStderr:
        type: "boolean"
        description: "Attach to `stderr` of the exec command."
        x-dataType: "Bool"
      DetachKeys:
        type: "string"
        description: "Override the key sequence for detaching a container. Format\
          \ is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one\
          \ of: `a-z`, `@`, `^`, `[`, `,` or `_`."
        x-dataType: "Text"
      Tty:
        type: "boolean"
        description: "Allocate a pseudo-TTY."
        x-dataType: "Bool"
      Env:
        type: "array"
        description: "A list of environment variables in the form `[\"VAR=value\"\
          , ...]`."
        items:
          type: "string"
        x-dataType: "[Text]"
      Cmd:
        type: "array"
        description: "Command to run, as a string or array of strings."
        items:
          type: "string"
        x-dataType: "[Text]"
      Privileged:
        type: "boolean"
        description: "Runs the exec process with extended privileges."
        default: false
        x-dataType: "Bool"
      User:
        type: "string"
        description: "The user, and optionally, group to run the exec process inside\
          \ the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`."
        x-dataType: "Text"
    example:
      AttachStdin: false
      AttachStdout: true
      AttachStderr: true
      DetachKeys: "ctrl-p,ctrl-q"
      Tty: false
      Cmd:
      - "date"
      Env:
      - "FOO=bar"
      - "BAZ=quux"
    x-mimeTypes:
    - "MimeJSON"
  execStartConfig:
    type: "object"
    properties:
      Detach:
        type: "boolean"
        description: "Detach from the command."
        x-dataType: "Bool"
      Tty:
        type: "boolean"
        description: "Allocate a pseudo-TTY."
        x-dataType: "Bool"
    example:
      Detach: false
      Tty: false
    x-mimeTypes:
    - "MimeJSON"
    - "MimeVndDockerRawStream"
  inline_response_200_14:
    properties:
      ID:
        type: "string"
        x-dataType: "Text"
      Running:
        type: "boolean"
        x-dataType: "Bool"
      ExitCode:
        type: "integer"
        x-dataType: "Int"
      ProcessConfig:
        $ref: "#/definitions/ProcessConfig"
        x-dataType: "ProcessConfig"
      OpenStdin:
        type: "boolean"
        x-dataType: "Bool"
      OpenStderr:
        type: "boolean"
        x-dataType: "Bool"
      OpenStdout:
        type: "boolean"
        x-dataType: "Bool"
      ContainerID:
        type: "string"
        x-dataType: "Text"
      Pid:
        type: "integer"
        description: "The system process ID for the exec process."
        x-dataType: "Int"
  inline_response_200_15:
    required:
    - "Volumes"
    - "Warnings"
    properties:
      Volumes:
        type: "array"
        description: "List of volumes"
        items:
          $ref: "#/definitions/Volume"
        x-nullable: false
        x-dataType: "[Volume]"
      Warnings:
        type: "array"
        description: "Warnings that occurred when fetching the list of volumes"
        items:
          type: "string"
        x-nullable: false
        x-dataType: "[Text]"
  volumeConfig:
    type: "object"
    properties:
      Name:
        type: "string"
        description: "The new volume's name. If not specified, Docker generates a\
          \ name."
        x-nullable: false
        x-dataType: "Text"
      Driver:
        type: "string"
        description: "Name of the volume driver to use."
        default: "local"
        x-nullable: false
        x-dataType: "Text"
      DriverOpts:
        type: "object"
        description: "A mapping of driver options and values. These options are passed\
          \ directly to the driver and are driver specific."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
    example:
      Name: "tardis"
      Labels:
        com.example.some-label: "some-value"
        com.example.some-other-label: "some-other-value"
      Driver: "custom"
    x-mimeTypes:
    - "MimeJSON"
  inline_response_200_16:
    properties:
      VolumesDeleted:
        type: "array"
        description: "Volumes that were deleted"
        items:
          type: "string"
        x-dataType: "[Text]"
      SpaceReclaimed:
        type: "integer"
        format: "int64"
        description: "Disk space reclaimed in bytes"
        x-dataType: "Integer"
    example:
      SpaceReclaimed: 0
      VolumesDeleted:
      - "VolumesDeleted"
      - "VolumesDeleted"
  networkConfig:
    type: "object"
    required:
    - "Name"
    properties:
      Name:
        type: "string"
        description: "The network's name."
        x-dataType: "Text"
      CheckDuplicate:
        type: "boolean"
        description: "Check for networks with duplicate names."
        x-dataType: "Bool"
      Driver:
        type: "string"
        description: "Name of the network driver plugin to use."
        default: "bridge"
        x-dataType: "Text"
      Internal:
        type: "boolean"
        description: "Restrict external access to the network."
        x-dataType: "Bool"
      IPAM:
        description: "Optional custom IP scheme for the network."
        $ref: "#/definitions/IPAM"
        x-dataType: "IPAM"
      EnableIPv6:
        type: "boolean"
        description: "Enable IPv6 on the network."
        x-dataType: "Bool"
      Options:
        type: "object"
        description: "Network specific options to be used by the drivers."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
    example:
      Name: "isolated_nw"
      CheckDuplicate: false
      Driver: "bridge"
      EnableIPv6: true
      IPAM:
        Driver: "default"
        Config:
        - Subnet: "172.20.0.0/16"
          IPRange: "172.20.10.0/24"
          Gateway: "172.20.10.11"
        - Subnet: "2001:db8:abcd::/64"
          Gateway: "2001:db8:abcd::1011"
        Options:
          foo: "bar"
      Internal: true
      Options:
        com.docker.network.bridge.default_bridge: "true"
        com.docker.network.bridge.enable_icc: "true"
        com.docker.network.bridge.enable_ip_masquerade: "true"
        com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
        com.docker.network.bridge.name: "docker0"
        com.docker.network.driver.mtu: "1500"
      Labels:
        com.example.some-label: "some-value"
        com.example.some-other-label: "some-other-value"
  inline_response_201_1:
    properties:
      Id:
        type: "string"
        description: "The ID of the created network."
        x-dataType: "Text"
      Warning:
        type: "string"
        x-dataType: "Text"
    example: "{\"Id\":\"22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30\"\
      ,\"Warning\":\"\"}"
  container:
    type: "object"
    properties:
      Container:
        type: "string"
        description: "The ID or name of the container to connect to the network."
        x-dataType: "Text"
      EndpointConfig:
        $ref: "#/definitions/EndpointSettings"
        x-dataType: "EndpointSettings"
    example:
      Container: "3613f73ba0e4"
      EndpointConfig:
        IPAMConfig:
          IPv4Address: "172.24.56.89"
          IPv6Address: "2001:db8::5689"
    x-mimeTypes:
    - "MimePlainText"
    - "MimeJSON"
    - "MimeOctetStream"
  container_1:
    type: "object"
    properties:
      Container:
        type: "string"
        description: "The ID or name of the container to disconnect from the network."
        x-dataType: "Text"
      Force:
        type: "boolean"
        description: "Force the container to disconnect from the network."
        x-dataType: "Bool"
    x-mimeTypes:
    - "MimePlainText"
    - "MimeJSON"
  inline_response_200_17:
    properties:
      VolumesDeleted:
        type: "array"
        description: "Networks that were deleted"
        items:
          type: "string"
        x-dataType: "[Text]"
    example:
      VolumesDeleted:
      - "VolumesDeleted"
      - "VolumesDeleted"
  inline_response_200_18:
    properties:
      Name:
        type: "string"
        x-dataType: "Text"
      Description:
        type: "string"
        x-dataType: "Text"
      Value:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
    description: "Describes a permission the user has to accept upon installing the\
      \ plugin."
  body:
    properties:
      Name:
        type: "string"
        x-dataType: "Text"
      Description:
        type: "string"
        x-dataType: "Text"
      Value:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
    description: "Describes a permission accepted by the user upon installing the\
      \ plugin."
  body_1:
    type: "object"
    properties:
      ListenAddr:
        type: "string"
        description: "Listen address used for inter-manager communication, as well\
          \ as determining the networking interface used for the VXLAN Tunnel Endpoint\
          \ (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`,\
          \ or an interface followed by a port number, like `eth0:4567`. If the port\
          \ number is omitted, the default swarm listening port is used."
        x-dataType: "Text"
      AdvertiseAddr:
        type: "string"
        description: "Externally reachable address advertised to other nodes. This\
          \ can either be an address/port combination in the form `192.168.1.1:4567`,\
          \ or an interface followed by a port number, like `eth0:4567`. If the port\
          \ number is omitted, the port number from the listen address is used. If\
          \ `AdvertiseAddr` is not specified, it will be automatically detected when\
          \ possible."
        x-dataType: "Text"
      ForceNewCluster:
        type: "boolean"
        description: "Force creation of a new swarm."
        x-dataType: "Bool"
      Spec:
        $ref: "#/definitions/SwarmSpec"
        x-dataType: "SwarmSpec"
    example:
      ListenAddr: "0.0.0.0:2377"
      AdvertiseAddr: "192.168.1.1:2377"
      ForceNewCluster: false
      Spec:
        Orchestration: {}
        Raft: {}
        Dispatcher: {}
        CAConfig: {}
        EncryptionConfig:
          AutoLockManagers: false
    x-mimeTypes:
    - "MimePlainText"
    - "MimeJSON"
  body_2:
    type: "object"
    properties:
      ListenAddr:
        type: "string"
        description: "Listen address used for inter-manager communication if the node\
          \ gets promoted to manager, as well as determining the networking interface\
          \ used for the VXLAN Tunnel Endpoint (VTEP)."
        x-dataType: "Text"
      AdvertiseAddr:
        type: "string"
        description: "Externally reachable address advertised to other nodes. This\
          \ can either be an address/port combination in the form `192.168.1.1:4567`,\
          \ or an interface followed by a port number, like `eth0:4567`. If the port\
          \ number is omitted, the port number from the listen address is used. If\
          \ `AdvertiseAddr` is not specified, it will be automatically detected when\
          \ possible."
        x-dataType: "Text"
      RemoteAddrs:
        type: "string"
        description: "Addresses of manager nodes already participating in the swarm."
        x-dataType: "Text"
      JoinToken:
        type: "string"
        description: "Secret token for joining this swarm."
        x-dataType: "Text"
    example:
      ListenAddr: "0.0.0.0:2377"
      AdvertiseAddr: "192.168.1.1:2377"
      RemoteAddrs:
      - "node1:2377"
      JoinToken: "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2"
    x-mimeTypes:
    - "MimePlainText"
    - "MimeJSON"
  inline_response_200_19:
    properties:
      UnlockKey:
        type: "string"
        description: "The swarm's unlock key."
        x-dataType: "Text"
    example: "{\"UnlockKey\":\"SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8\"\
      }"
  body_3:
    type: "object"
    properties:
      UnlockKey:
        type: "string"
        description: "The swarm's unlock key."
        x-dataType: "Text"
    example:
      UnlockKey: "SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8"
    x-mimeTypes:
    - "MimeJSON"
  inline_response_201_2:
    properties:
      ID:
        type: "string"
        description: "The ID of the created service."
        x-dataType: "Text"
      Warning:
        type: "string"
        description: "Optional warning message"
        x-dataType: "Text"
    example: "{\"ID\":\"ak7w3gjqoa3kuz8xcpnyy0pvl\",\"Warning\":\"unable to pin image\
      \ doesnotexist:latest to digest: image library/doesnotexist:latest not found\"\
      }"
  inline_response_201_3:
    properties:
      ID:
        type: "string"
        description: "The ID of the created secret."
        x-dataType: "Text"
    example: "{\"ID\":\"ktnbjxoalbkvbvedmg1urrz8h\"}"
  Mount_VolumeOptions_DriverConfig:
    properties:
      Name:
        type: "string"
        description: "Name of the driver to use to create the volume."
        x-dataType: "Text"
      Options:
        type: "object"
        description: "key/value map of driver specific options."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
    description: "Map of driver specific options"
    example:
      Options:
        key: "Options"
      Name: "Name"
  Mount_VolumeOptions:
    properties:
      NoCopy:
        type: "boolean"
        description: "Populate volume with data from the target."
        default: false
        x-dataType: "Bool"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      DriverConfig:
        $ref: "#/definitions/Mount_VolumeOptions_DriverConfig"
        x-dataType: "MountVolumeOptionsDriverConfig"
    description: "Optional configuration for the `volume` type."
    example:
      NoCopy: false
      DriverConfig:
        Options:
          key: "Options"
        Name: "Name"
      Labels:
        key: "Labels"
  Mount_TmpfsOptions:
    properties:
      SizeBytes:
        type: "integer"
        format: "int64"
        description: "The size for the tmpfs mount in bytes."
        x-dataType: "Integer"
      Mode:
        type: "integer"
        description: "The permission mode for the tmpfs mount in an integer."
        x-dataType: "Int"
    description: "Optional configuration for the `tmpfs` type."
    example:
      Mode: 1
      SizeBytes: 6
  Resources_BlkioWeightDevice:
    properties:
      Path:
        type: "string"
        x-dataType: "Text"
      Weight:
        type: "integer"
        minimum: 0
        x-dataType: "Int"
  Resources_Ulimits:
    properties:
      Name:
        type: "string"
        description: "Name of ulimit"
        x-dataType: "Text"
      Soft:
        type: "integer"
        description: "Soft limit"
        x-dataType: "Int"
      Hard:
        type: "integer"
        description: "Hard limit"
        x-dataType: "Int"
  HostConfig_LogConfig:
    properties:
      Type:
        type: "string"
        enum:
        - "json-file"
        - "syslog"
        - "journald"
        - "gelf"
        - "fluentd"
        - "awslogs"
        - "splunk"
        - "etwlogs"
        - "none"
        x-dataType: "E'Type3"
      Config:
        type: "object"
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
    description: "The logging configuration for this container"
  HostConfig_PortBindings:
    properties:
      HostIp:
        type: "string"
        description: "The host IP address"
        x-dataType: "Text"
      HostPort:
        type: "string"
        description: "The host port number, as a string"
        x-dataType: "Text"
  Config_Healthcheck:
    properties:
      Test:
        type: "array"
        description: "The test to perform. Possible values are:\n\n- `{}` inherit\
          \ healthcheck from image or parent image\n- `{\"NONE\"}` disable healthcheck\n\
          - `{\"CMD\", args...}` exec arguments directly\n- `{\"CMD-SHELL\", command}`\
          \ run command with system's default shell\n"
        items:
          type: "string"
        x-dataType: "[Text]"
      Interval:
        type: "integer"
        description: "The time to wait between checks in nanoseconds. 0 means inherit."
        x-dataType: "Int"
      Timeout:
        type: "integer"
        description: "The time to wait before considering the check to have hung.\
          \ 0 means inherit."
        x-dataType: "Int"
      Retries:
        type: "integer"
        description: "The number of consecutive failures needed to consider a container\
          \ as unhealthy. 0 means inherit."
        x-dataType: "Int"
    description: "A test to perform to check that the container is healthy."
    example:
      Test:
      - "Test"
      - "Test"
      Timeout: 6
      Retries: 1
      Interval: 0
  Config_Volumes:
    properties:
      additionalProperties:
        type: "object"
        properties: {}
        x-dataType: "A.Value"
    description: "An object mapping mount point paths inside the container to empty\
      \ objects."
    example:
      additionalProperties: "{}"
  Image_RootFS:
    properties:
      Type:
        type: "string"
        x-dataType: "Text"
      Layers:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      BaseLayer:
        type: "string"
        x-dataType: "Text"
  Volume_UsageData:
    required:
    - "RefCount"
    - "Size"
    properties:
      Size:
        type: "integer"
        description: "The disk space used by the volume (local driver only)"
        x-nullable: false
        x-dataType: "Int"
      RefCount:
        type: "integer"
        description: "The number of containers referencing this volume."
        x-nullable: false
        x-dataType: "Int"
  EndpointSettings_IPAMConfig:
    properties:
      IPv4Address:
        type: "string"
        x-dataType: "Text"
      IPv6Address:
        type: "string"
        x-dataType: "Text"
      LinkLocalIPs:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
    description: "IPAM configurations for the endpoint"
  Plugin_Settings:
    required:
    - "Args"
    - "Devices"
    - "Env"
    - "Mounts"
    properties:
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/PluginMount"
        x-dataType: "[PluginMount]"
      Env:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Args:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Devices:
        type: "array"
        items:
          $ref: "#/definitions/PluginDevice"
        x-dataType: "[PluginDevice]"
    description: "Settings that can be modified by users."
  Plugin_Config_Interface:
    required:
    - "Socket"
    - "Types"
    properties:
      Types:
        type: "array"
        items:
          $ref: "#/definitions/PluginInterfaceType"
        x-dataType: "[PluginInterfaceType]"
      Socket:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
    description: "The interface between Docker and the plugin"
  Plugin_Config_User:
    properties:
      UID:
        type: "integer"
        format: "uint32"
        x-dataType: "Int"
      GID:
        type: "integer"
        format: "uint32"
        x-dataType: "Int"
  Plugin_Config_Network:
    required:
    - "Type"
    properties:
      Type:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
  Plugin_Config_Linux:
    required:
    - "AllowAllDevices"
    - "Capabilities"
    - "Devices"
    properties:
      Capabilities:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      AllowAllDevices:
        type: "boolean"
        x-nullable: false
        x-dataType: "Bool"
      Devices:
        type: "array"
        items:
          $ref: "#/definitions/PluginDevice"
        x-dataType: "[PluginDevice]"
  Plugin_Config_Args:
    required:
    - "Description"
    - "Name"
    - "Settable"
    - "Value"
    properties:
      Name:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Description:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Settable:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      Value:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
  Plugin_Config_rootfs:
    properties:
      type:
        type: "string"
        x-dataType: "Text"
      diff_ids:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
  Plugin_Config:
    required:
    - "Args"
    - "Description"
    - "Documentation"
    - "Entrypoint"
    - "Env"
    - "Interface"
    - "Linux"
    - "Mounts"
    - "Network"
    - "PropagatedMount"
    - "WorkDir"
    properties:
      Description:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Documentation:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Interface:
        $ref: "#/definitions/Plugin_Config_Interface"
        x-dataType: "PluginConfigInterface"
      Entrypoint:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
      WorkDir:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      User:
        $ref: "#/definitions/Plugin_Config_User"
        x-dataType: "PluginConfigUser"
      Network:
        $ref: "#/definitions/Plugin_Config_Network"
        x-dataType: "PluginConfigNetwork"
      Linux:
        $ref: "#/definitions/Plugin_Config_Linux"
        x-dataType: "PluginConfigLinux"
      PropagatedMount:
        type: "string"
        x-nullable: false
        x-dataType: "Text"
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/PluginMount"
        x-dataType: "[PluginMount]"
      Env:
        type: "array"
        items:
          $ref: "#/definitions/PluginEnv"
        x-dataType: "[PluginEnv]"
      Args:
        $ref: "#/definitions/Plugin_Config_Args"
        x-dataType: "PluginConfigArgs"
      rootfs:
        $ref: "#/definitions/Plugin_Config_rootfs"
        x-dataType: "PluginConfigRootfs"
    description: "The config of a plugin."
  Node_Version:
    properties:
      Index:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
    example:
      Index: 0
  Node_Description_Platform:
    properties:
      Architecture:
        type: "string"
        x-dataType: "Text"
      OS:
        type: "string"
        x-dataType: "Text"
  Node_Description_Resources:
    properties:
      NanoCPUs:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
      MemoryBytes:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
  Node_Description_Engine_Plugins:
    properties:
      Type:
        type: "string"
        x-dataType: "Text"
      Name:
        type: "string"
        x-dataType: "Text"
  Node_Description_Engine:
    properties:
      EngineVersion:
        type: "string"
        x-dataType: "Text"
      Labels:
        type: "object"
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      Plugins:
        type: "array"
        items:
          $ref: "#/definitions/Node_Description_Engine_Plugins"
        x-dataType: "[NodeDescriptionEnginePlugins]"
  Node_Description:
    properties:
      Hostname:
        type: "string"
        x-dataType: "Text"
      Platform:
        $ref: "#/definitions/Node_Description_Platform"
        x-dataType: "NodeDescriptionPlatform"
      Resources:
        $ref: "#/definitions/Node_Description_Resources"
        x-dataType: "NodeDescriptionResources"
      Engine:
        $ref: "#/definitions/Node_Description_Engine"
        x-dataType: "NodeDescriptionEngine"
  SwarmSpec_Orchestration:
    properties:
      TaskHistoryRetentionLimit:
        type: "integer"
        format: "int64"
        description: "The number of historic tasks to keep per instance or node. If\
          \ negative, never remove completed or failed tasks."
        x-dataType: "Integer"
    description: "Orchestration configuration."
  SwarmSpec_Raft:
    properties:
      SnapshotInterval:
        type: "integer"
        format: "int64"
        description: "The number of log entries between snapshots."
        x-dataType: "Integer"
      KeepOldSnapshots:
        type: "integer"
        format: "int64"
        description: "The number of snapshots to keep beyond the current snapshot."
        x-dataType: "Integer"
      LogEntriesForSlowFollowers:
        type: "integer"
        format: "int64"
        description: "The number of log entries to keep around to sync up slow followers\
          \ after a snapshot is created."
        x-dataType: "Integer"
      ElectionTick:
        type: "integer"
        description: "The number of ticks that a follower will wait for a message\
          \ from the leader before becoming a candidate and starting an election.\
          \ `ElectionTick` must be greater than `HeartbeatTick`.\n\nA tick currently\
          \ defaults to one second, so these translate directly to seconds currently,\
          \ but this is NOT guaranteed.\n"
        x-dataType: "Int"
      HeartbeatTick:
        type: "integer"
        description: "The number of ticks between heartbeats. Every HeartbeatTick\
          \ ticks, the leader will send a heartbeat to the followers.\n\nA tick currently\
          \ defaults to one second, so these translate directly to seconds currently,\
          \ but this is NOT guaranteed.\n"
        x-dataType: "Int"
    description: "Raft configuration."
  SwarmSpec_Dispatcher:
    properties:
      HeartbeatPeriod:
        type: "integer"
        format: "int64"
        description: "The delay for an agent to send a heartbeat to the dispatcher."
        x-dataType: "Integer"
    description: "Dispatcher configuration."
  SwarmSpec_CAConfig_ExternalCAs:
    properties:
      Protocol:
        type: "string"
        description: "Protocol for communication with the external CA (currently only\
          \ `cfssl` is supported)."
        default: "cfssl"
        enum:
        - "cfssl"
        x-dataType: "E'Protocol"
      URL:
        type: "string"
        description: "URL where certificate signing requests should be sent."
        x-dataType: "Text"
      Options:
        type: "object"
        description: "An object with key/value pairs that are interpreted as protocol-specific\
          \ options for the external CA driver."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
  SwarmSpec_CAConfig:
    properties:
      NodeCertExpiry:
        type: "integer"
        format: "int64"
        description: "The duration node certificates are issued for."
        x-dataType: "Integer"
      ExternalCAs:
        type: "array"
        description: "Configuration for forwarding signing requests to an external\
          \ certificate authority."
        items:
          $ref: "#/definitions/SwarmSpec_CAConfig_ExternalCAs"
        x-dataType: "[SwarmSpecCAConfigExternalCAs]"
    description: "CA configuration."
  SwarmSpec_EncryptionConfig:
    properties:
      AutoLockManagers:
        type: "boolean"
        description: "If set, generate a key and use it to lock data stored on the\
          \ managers."
        x-dataType: "Bool"
    description: "Parameters related to encryption-at-rest."
  SwarmSpec_TaskDefaults_LogDriver:
    properties:
      Name:
        type: "string"
        x-dataType: "Text"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
    description: "The log driver to use for tasks created in the orchestrator if unspecified\
      \ by a service.\n\nUpdating this value will only have an affect on new tasks.\
      \ Old tasks will continue use their previously configured log driver until recreated.\n"
  SwarmSpec_TaskDefaults:
    properties:
      LogDriver:
        $ref: "#/definitions/SwarmSpec_TaskDefaults_LogDriver"
        x-dataType: "SwarmSpecTaskDefaultsLogDriver"
    description: "Defaults for creating tasks in this cluster."
  TaskSpec_ContainerSpec_DNSConfig:
    properties:
      Nameservers:
        type: "array"
        description: "The IP addresses of the name servers."
        items:
          type: "string"
        x-dataType: "[Text]"
      Search:
        type: "array"
        description: "A search list for host-name lookup."
        items:
          type: "string"
        x-dataType: "[Text]"
      Options:
        type: "array"
        description: "A list of internal resolver variables to be modified (e.g.,\
          \ `debug`, `ndots:3`, etc.)."
        items:
          type: "string"
        x-dataType: "[Text]"
    description: "Specification for DNS related configurations in resolver configuration\
      \ file (`resolv.conf`)."
    example:
      Options:
      - "Options"
      - "Options"
      Nameservers:
      - "Nameservers"
      - "Nameservers"
      Search:
      - "Search"
      - "Search"
  TaskSpec_ContainerSpec:
    properties:
      Image:
        type: "string"
        description: "The image name to use for the container."
        x-dataType: "Text"
      Command:
        type: "array"
        description: "The command to be run in the image."
        items:
          type: "string"
        x-dataType: "[Text]"
      Args:
        type: "array"
        description: "Arguments to the command."
        items:
          type: "string"
        x-dataType: "[Text]"
      Env:
        type: "array"
        description: "A list of environment variables in the form `VAR=value`."
        items:
          type: "string"
        x-dataType: "[Text]"
      Dir:
        type: "string"
        description: "The working directory for commands to run in."
        x-dataType: "Text"
      User:
        type: "string"
        description: "The user inside the container."
        x-dataType: "Text"
      Labels:
        type: "object"
        description: "User-defined key/value data."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      TTY:
        type: "boolean"
        description: "Whether a pseudo-TTY should be allocated."
        x-dataType: "Bool"
      Mounts:
        type: "array"
        description: "Specification for mounts to be added to containers created as\
          \ part of the service."
        items:
          $ref: "#/definitions/Mount"
        x-dataType: "[Mount]"
      StopGracePeriod:
        type: "integer"
        format: "int64"
        description: "Amount of time to wait for the container to terminate before\
          \ forcefully killing it."
        x-dataType: "Integer"
      DNSConfig:
        $ref: "#/definitions/TaskSpec_ContainerSpec_DNSConfig"
        x-dataType: "TaskSpecContainerSpecDNSConfig"
    example:
      Args:
      - "Args"
      - "Args"
      Mounts:
      - ReadOnly: true
        BindOptions: "{}"
        Target: "Target"
        Type: "bind"
        VolumeOptions:
          NoCopy: false
          DriverConfig:
            Options:
              key: "Options"
            Name: "Name"
          Labels:
            key: "Labels"
        TmpfsOptions:
          Mode: 1
          SizeBytes: 6
      - ReadOnly: true
        BindOptions: "{}"
        Target: "Target"
        Type: "bind"
        VolumeOptions:
          NoCopy: false
          DriverConfig:
            Options:
              key: "Options"
            Name: "Name"
          Labels:
            key: "Labels"
        TmpfsOptions:
          Mode: 1
          SizeBytes: 6
      User: "User"
      Command:
      - "Command"
      - "Command"
      TTY: true
      DNSConfig:
        Options:
        - "Options"
        - "Options"
        Nameservers:
        - "Nameservers"
        - "Nameservers"
        Search:
        - "Search"
        - "Search"
      Labels:
        key: "Labels"
      StopGracePeriod: 5
      Image: "Image"
      Env:
      - "Env"
      - "Env"
      Dir: "Dir"
  TaskSpec_Resources_Limits:
    properties:
      NanoCPUs:
        type: "integer"
        format: "int64"
        description: "CPU limit in units of 10<sup>-9</sup> CPU shares."
        x-dataType: "Integer"
      MemoryBytes:
        type: "integer"
        format: "int64"
        description: "Memory limit in Bytes."
        x-dataType: "Integer"
    description: "Define resources limits."
    example:
      NanoCPUs: 5
      MemoryBytes: 2
  TaskSpec_Resources_Reservation:
    properties:
      NanoCPUs:
        type: "integer"
        format: "int64"
        description: "CPU reservation in units of 10<sup>-9</sup> CPU shares."
        x-dataType: "Integer"
      MemoryBytes:
        type: "integer"
        format: "int64"
        description: "Memory reservation in Bytes."
        x-dataType: "Integer"
    description: "Define resources reservation."
    example:
      NanoCPUs: 7
      MemoryBytes: 9
  TaskSpec_Resources:
    properties:
      Limits:
        $ref: "#/definitions/TaskSpec_Resources_Limits"
        x-dataType: "TaskSpecResourcesLimits"
      Reservation:
        $ref: "#/definitions/TaskSpec_Resources_Reservation"
        x-dataType: "TaskSpecResourcesReservation"
    description: "Resource requirements which apply to each individual container created\
      \ as part of the service."
    example:
      Reservation:
        NanoCPUs: 7
        MemoryBytes: 9
      Limits:
        NanoCPUs: 5
        MemoryBytes: 2
  TaskSpec_RestartPolicy:
    properties:
      Condition:
        type: "string"
        description: "Condition for restart."
        enum:
        - "none"
        - "on-failure"
        - "any"
        x-dataType: "E'Condition"
      Delay:
        type: "integer"
        format: "int64"
        description: "Delay between restart attempts."
        x-dataType: "Integer"
      MaxAttempts:
        type: "integer"
        format: "int64"
        description: "Maximum attempts to restart a given container before giving\
          \ up (default value is 0, which is ignored)."
        default: 0
        x-dataType: "Integer"
      Window:
        type: "integer"
        format: "int64"
        description: "Windows is the time window used to evaluate the restart policy\
          \ (default value is 0, which is unbounded)."
        default: 0
        x-dataType: "Integer"
    description: "Specification for the restart policy which applies to containers\
      \ created as part of this service."
    example:
      Condition: "none"
      Window: 4
      Delay: 3
      MaxAttempts: 2
  TaskSpec_Placement:
    properties:
      Constraints:
        type: "array"
        description: "An array of constraints."
        items:
          type: "string"
        x-dataType: "[Text]"
    example:
      Constraints:
      - "Constraints"
      - "Constraints"
  TaskSpec_Networks:
    properties:
      Target:
        type: "string"
        x-dataType: "Text"
      Aliases:
        type: "array"
        items:
          type: "string"
        x-dataType: "[Text]"
    example:
      Target: "Target"
      Aliases:
      - "Aliases"
      - "Aliases"
  TaskSpec_LogDriver:
    properties:
      Name:
        type: "string"
        x-dataType: "Text"
      Options:
        type: "object"
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
    description: "Specifies the log driver to use for tasks created from this spec.\
      \ If not present, the default one for the swarm will be used, finally falling\
      \ back to the engine default if not specified."
    example:
      Options:
        key: "Options"
      Name: "Name"
  Task_Status_ContainerStatus:
    properties:
      ContainerID:
        type: "string"
        x-dataType: "Text"
      PID:
        type: "integer"
        x-dataType: "Int"
      ExitCode:
        type: "integer"
        x-dataType: "Int"
  Task_Status:
    properties:
      Timestamp:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      State:
        $ref: "#/definitions/TaskState"
        x-dataType: "TaskState"
      Message:
        type: "string"
        x-dataType: "Text"
      Err:
        type: "string"
        x-dataType: "Text"
      ContainerStatus:
        $ref: "#/definitions/Task_Status_ContainerStatus"
        x-dataType: "TaskStatusContainerStatus"
  ServiceSpec_Mode_Replicated:
    properties:
      Replicas:
        type: "integer"
        format: "int64"
        x-dataType: "Integer"
    example:
      Replicas: 1
  ServiceSpec_Mode:
    properties:
      Replicated:
        $ref: "#/definitions/ServiceSpec_Mode_Replicated"
        x-dataType: "ServiceSpecModeReplicated"
      Global:
        type: "object"
        properties: {}
        x-dataType: "A.Value"
    description: "Scheduling mode for the service."
    example:
      Replicated:
        Replicas: 1
      Global: "{}"
  ServiceSpec_UpdateConfig:
    properties:
      Parallelism:
        type: "integer"
        format: "int64"
        description: "Maximum number of tasks to be updated in one iteration (0 means\
          \ unlimited parallelism)."
        x-dataType: "Integer"
      Delay:
        type: "integer"
        format: "int64"
        description: "Amount of time between updates, in nanoseconds."
        x-dataType: "Integer"
      FailureAction:
        type: "string"
        description: "Action to take if an updated task fails to run, or stops running\
          \ during the update."
        enum:
        - "continue"
        - "pause"
        x-dataType: "E'FailureAction"
      Monitor:
        type: "integer"
        format: "int64"
        description: "Amount of time to monitor each updated task for failures, in\
          \ nanoseconds."
        x-dataType: "Integer"
      MaxFailureRatio:
        type: "number"
        description: "The fraction of tasks that may fail during an update before\
          \ the failure action is invoked, specified as a floating point number between\
          \ 0 and 1."
        x-dataType: "Double"
    description: "Specification for the update strategy of the service."
    example:
      FailureAction: "continue"
      MaxFailureRatio: 7.4577447736837658709418974467553198337554931640625
      Monitor: 6
      Parallelism: 1
      Delay: 1
  Service_Endpoint_VirtualIPs:
    properties:
      NetworkID:
        type: "string"
        x-dataType: "Text"
      Addr:
        type: "string"
        x-dataType: "Text"
  Service_Endpoint:
    properties:
      Spec:
        $ref: "#/definitions/EndpointSpec"
        x-dataType: "EndpointSpec"
      Ports:
        type: "array"
        items:
          $ref: "#/definitions/EndpointPortConfig"
        x-dataType: "[EndpointPortConfig]"
      VirtualIPs:
        type: "array"
        items:
          $ref: "#/definitions/Service_Endpoint_VirtualIPs"
        x-dataType: "[ServiceEndpointVirtualIPs]"
  Service_UpdateStatus:
    properties:
      State:
        type: "string"
        enum:
        - "updating"
        - "paused"
        - "completed"
        x-dataType: "E'State"
      StartedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      CompletedAt:
        type: "string"
        format: "dateTime"
        x-dataType: "Text"
      Message:
        type: "string"
        x-dataType: "Text"
    description: "The status of a service update."
  ContainerSummary_inner_HostConfig:
    properties:
      NetworkMode:
        type: "string"
        x-dataType: "Text"
  ContainerSummary_inner_NetworkSettings:
    properties:
      Networks:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/EndpointSettings"
        x-dataType: "(Map.Map String EndpointSettings)"
    description: "A summary of the container's network settings"
  ContainerSummary_inner:
    properties:
      Id:
        type: "string"
        description: "The ID of this container"
        x-go-name: "ID"
        x-dataType: "Text"
      Names:
        type: "array"
        description: "The names that this container has been given"
        items:
          type: "string"
        x-dataType: "[Text]"
      Image:
        type: "string"
        description: "The name of the image used when creating this container"
        x-dataType: "Text"
      ImageID:
        type: "string"
        description: "The ID of the image that this container was created from"
        x-dataType: "Text"
      Command:
        type: "string"
        description: "Command to run when starting the container"
        x-dataType: "Text"
      Created:
        type: "integer"
        format: "int64"
        description: "When the container was created"
        x-dataType: "Integer"
      Ports:
        type: "array"
        description: "The ports exposed by this container"
        items:
          $ref: "#/definitions/Port"
        x-dataType: "[Port]"
      SizeRw:
        type: "integer"
        format: "int64"
        description: "The size of files that have been created or changed by this\
          \ container"
        x-dataType: "Integer"
      SizeRootFs:
        type: "integer"
        format: "int64"
        description: "The total size of all the files in this container"
        x-dataType: "Integer"
      Labels:
        type: "object"
        description: "User-defined key/value metadata."
        additionalProperties:
          type: "string"
        x-dataType: "(Map.Map String Text)"
      State:
        type: "string"
        description: "The state of this container (e.g. `Exited`)"
        x-dataType: "Text"
      Status:
        type: "string"
        description: "Additional human-readable status of this container (e.g. `Exit\
          \ 0`)"
        x-dataType: "Text"
      HostConfig:
        $ref: "#/definitions/ContainerSummary_inner_HostConfig"
        x-dataType: "ContainerSummaryInnerHostConfig"
      NetworkSettings:
        $ref: "#/definitions/ContainerSummary_inner_NetworkSettings"
        x-dataType: "ContainerSummaryInnerNetworkSettings"
      Mounts:
        type: "array"
        items:
          $ref: "#/definitions/Mount"
        x-dataType: "[Mount]"
